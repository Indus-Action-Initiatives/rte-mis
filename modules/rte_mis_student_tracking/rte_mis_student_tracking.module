<?php

/**
 * @file
 * Contains rte_mis_student_tracking.module.
 */

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Callback to get the list of allowed values.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity the field belongs to.
 *
 * @return array
 *   An associative array of allowed values.
 */
function rte_mis_student_tracking_get_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL) {
  \Drupal::moduleHandler()->loadInclude('rte_mis_core', 'inc', 'rte_mis_core');
  $options = rte_mis_core_get_allowed_values($definition, $entity);
  return $options;
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_student_tracking_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if this is the exposed filter form you want to modify.
  if ($form_id == 'views_exposed_form' && isset($form['#id']) && $form['#id'] == 'views-exposed-form-student-tracking-dashboard-page-1') {

    $options = rte_mis_student_tracking_class_list_options();

    // Add a checkboxes element to the form.
    $form['class_filter'] = [
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => [],
    ];

    // Create a list of values for total students.
    $items = [];
    foreach (rte_mis_student_tracking_get_total_students() as $value) {
      $items[] = $value;
    }

    // Add the list of values as a markup element.
    $form['total_students'] = [
      '#type' => 'markup',
      '#markup' => '<ul><li>' . implode('</li><li>', $items) . '</li></ul>',
    ];

    $form['#cache'] = [
      'tags' => [
        'config:rte_mis_student_tracking.settings',
        'config:rte_mis_school.settings',
      ],
    ];
  }
}

/**
 * Function to get the options.
 */
function rte_mis_student_tracking_class_list_options() {
  $options = [];
  $tracking_config = \Drupal::config('rte_mis_student_tracking.settings') ?? NULL;
  $school_config = \Drupal::config('rte_mis_school.settings') ?? NULL;
  $selected_class = $tracking_config->get('allowed_class_list');
  $entry_class = $school_config->get('field_default_options.class_level') ?? [];
  sort($selected_class);
  foreach ($selected_class as $class) {
    if (isset($entry_class[$class])) {
      $student_count = rte_mis_student_tracking_get_student_count($class);
      $options[$class] = '<h2>' . t('@class', ['@class' => $entry_class[$class]]) . '</h2><br>' . t('@count', ['@count' => $student_count]);
    }
  }
  return $options;
}

/**
 * Get the count of students based on class.
 */
function rte_mis_student_tracking_get_student_count($class) {
  $query = \Drupal::entityQuery('mini_node')
    ->condition('field_current_class', $class)
    ->accessCheck(FALSE);
  $students = $query->execute();

  return count($students);
}

/**
 * Implements hook_views_query_alter().
 */
function rte_mis_student_tracking_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'student_tracking_dashboard') {
    // Get the current loggedIn user.
    $currentUser = \Drupal::currentUser();
    if (array_intersect(['school_admin'], $currentUser->getRoles())) {
      // Load the user entity.
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($currentUser->id() ?? NULL);
      // Check if the user is an instance of userInterface.
      if ($user instanceof UserInterface) {
        // Get the school id linked with the current loggedIn user.
        $schoolId = $user->get('field_school_details')->getString() ?? NULL;
        // dd($schoolId);
        if ($schoolId) {
          // Query to filter based on school.
          $definition = [
            'table' => 'mini_node__field_school',
            'field' => 'entity_id',
            'left_table' => 'mini_node_field_data',
            'left_field' => 'id',
            'type' => 'LEFT',
          ];
          $join = \Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
          $query->addRelationship('mini_node__field_school', $join, 'mini_node_field_data');
          // Add a condition to filter by specific school ids.
          $query->addWhere('0', 'mini_node__field_school.field_school_target_id', $schoolId, '=');
        }
      }
    }
    // Handle the custom checkbox filter.
    $exposedInput = $view->getExposedInput();
    if (isset($exposedInput['class_filter']) && is_array($exposedInput['class_filter'])) {
      $definition = [
        'table' => 'mini_node__field_current_class',
        'field' => 'entity_id',
        'left_table' => 'mini_node_field_data',
        'left_field' => 'id',
        'type' => 'LEFT',
      ];
      $join = \Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
      $query->addRelationship('mini_node__field_current_class', $join, 'mini_node_field_data');
      // Checkbox is checked, add your condition.
      $query->addWhere('0', 'mini_node__field_current_class.field_current_class_value', $exposedInput['class_filter'], 'IN');
    }
    // Add a cache context for the user.
    $view->element['#cache']['contexts'][] = 'user';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function rte_mis_student_tracking_views_pre_render(ViewExecutable $view) {
  // Check if it's the specific view and display you want to modify.
  if ($view->id() == 'student_tracking_dashboard' && $view->current_display == 'page_1') {
    // Get the exposed filter input.
    $academic_session_input = $view->getExposedInput()['field_academic_session_value'] ?? NULL;
    // Get the default options for 'academic session'.
    $academic_session_options = $view->filter['field_academic_session_value']->getValueOptions();
    $current_academic_year = _rte_mis_core_get_current_academic_year();
    // Check if the selected academic session is the current academic session.
    if (in_array($current_academic_year, array_keys($academic_session_options)) && $academic_session_input != $current_academic_year) {
      unset($view->display_handler->handlers['field']['nothing_1']);
    }

  }
}

/**
 * Function to get the total students for a particular class.
 */
function rte_mis_student_tracking_get_total_students() {
  // Mapped array based on class.
  $total_count = [];
  // Load the config values.
  $tracking_config = \Drupal::config('rte_mis_student_tracking.settings') ?? NULL;
  $school_config = \Drupal::config('rte_mis_school.settings') ?? NULL;
  $selected_class = $tracking_config->get('allowed_class_list');
  $entry_class = $school_config->get('field_default_options.class_level') ?? [];
  // Sort the 'selected class list'.
  // Set the default value for each class as 0.
  sort($selected_class);
  foreach ($selected_class as $class) {
    if (isset($entry_class[$class])) {
      $total_count[$class] = 0;
    }
  }
  $currentUser = \Drupal::currentUser();
  // Get the current loggedIn User.
  $currentUserId = $currentUser->id();
  // Get the user roles.
  $currentUserRoles = $currentUser->getRoles(TRUE);
  if (in_array('school_admin', $currentUserRoles)) {
    // Get the school linked to the current user.
    $currentUserSchool = \Drupal::entityTypeManager()->getStorage('user')->load($currentUserId)->get('field_school_details')->getString() ?? NULL;
    // Check within all the schools where total class is defined.
    $educationDetails = \Drupal::entityTypeManager()->getStorage('mini_node')->load($currentUserSchool)->get('field_education_details') ?? NULL;
    $educationDetailsEntity = $educationDetails ? $educationDetails->referencedEntities() : NULL;
    foreach ($educationDetailsEntity as $value) {
      // Fee Details for each education detail.
      $feeDetails = $value->get('field_fee_details')->referencedEntities();
      foreach ($feeDetails as $feeParagraph) {
        $class = $feeParagraph->get('field_class_list')->getString();
        if (in_array($class, array_keys($total_count))) {
          $total_count[$class] += $feeParagraph->get('field_total_students')->getString();
        }
      }
    }
  }
  return $total_count;
}
