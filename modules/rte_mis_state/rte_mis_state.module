<?php

/**
 * @file
 * Contains rte_mis_state.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\cshs\Component\CshsOption;
use Drupal\cshs\Element\CshsElement;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\user\Entity\User;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Callback function to return the current academic year.
 */
function _rte_mis_state_get_current_academic_year() {
  $current_year = date('Y');
  $next_year = date('y', strtotime('+1 year'));

  return $current_year . '_' . $next_year;
}

/**
 * Callback function to provide the current academic year.
 */
function rte_mis_state_academic_year(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  // Get current academic year.
  $current_academic_year = _rte_mis_state_get_current_academic_year();

  $options = [
    "$current_academic_year" => str_replace('_', '-', $current_academic_year),
  ];

  return $options;
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_state_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add the campaign academic year validation.
  if (in_array($form_id, ['mini_node_campaign_form', 'mini_node_campaign_edit_form'])) {
    $form['#validate'][] = '_rte_mis_state_campaign_validate';
  }
  elseif (in_array($form_id, ['user_register_form', 'user_form'])) {
    $form['account']['pass']['#description'] = t(
      'Your password must meet the following criteria:
      <ul>
        <li>Be at least 6 characters long</li>
        <li>Contain at least one letter</li>
        <li>Contain at least one number</li>
        <li>Contain at least one special character</li>
      </ul>'
    );

    $role_mappings = [
      'state_admin' => [
        "authenticated" => "Authenticated user",
        'district_admin' => 'District Admin',
        'block_admin' => 'Block Admin',
        'nodal_officer' => 'Nodal Officer',
      ],
      'district_admin' => [
        "authenticated" => "Authenticated user",
        'block_admin' => 'Block Admin',
        'nodal_officer' => 'Nodal Officer',
      ],
    ];

    // Get the current user.
    $current_user = \Drupal::currentUser();
    // Get the current user's roles.
    $current_user_roles = $current_user->getRoles();
    // Based on current user role.
    // Check for the user roles they can create account.
    if (isset($role_mappings[$current_user_roles[1]])) {
      // Get the associated roles for creating accounts.
      $associated_roles = $role_mappings[$current_user_roles[1]];
      // Update the roles options in the form, if the element is set.
      if (isset($form['account']['roles'])) {
        $form['account']['roles']['#options'] = $associated_roles;
      }
    }

    $form['account']['roles']['#ajax'] = [
      'callback' => 'rte_mis_state_roles_ajax_callback',
      'wrapper' => 'wrapper',
    ];

    if (isset($form['field_admin_details'])) {
      $form['field_admin_details'] += [
        '#states' => [
          'visible' => [
            ':input[name="roles"]' => [
              ['value' => 'state_admin'],
              ['value' => 'district_admin'],
              ['value' => 'block_admin'],
            ],
          ],
        ],
      ];
      $form['location_container']['#prefix'] = '<div id="wrapper">';
      $form['location_container']['#suffix'] = '</div>';
      // Check for the roles element value using form_state.
      if ($selected_roles = $form_state->getValue('roles')) {
        // Check If district admin or block admin present in roles.
        if (in_array('district_admin', $selected_roles) || in_array('block_admin', $selected_roles)) {
          $form['field_admin_details']['#required'] = TRUE;
          // Default depth for district admin.
          $depth = 1;
          if (in_array('block_admin', $selected_roles)) {
            // Modify depth to 2 for block admin.
            $depth = 2;
          }
          // Load the data which will be passed as options to the cshs element.
          $terms_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('location', 0, $depth, TRUE);
          $options = [];
          // Passing the options to the cshs element.
          foreach ($terms_tree as $term) {
            $options[(int) $term->id()] = new CshsOption($term->label(), (int) $term->parent->target_id == 0 ? NULL : $term->parent->target_id);
          }
          $form['location_container']['location_parent'] = [
            '#type' => CshsElement::ID,
            '#label' => t('Location'),
            '#required' => TRUE,
            '#labels' => [
              'District',
              'Block',
            ],
            '#options' => $options ?? [],
            '#default_value' => $form_state->getValue('location_parent') ?? [],
          ];
        }
      }
      // Custom validate handler.
      $form['#validate'][] = 'rte_mis_state_user_location_field_set';
    }
  }
}

/**
 * Callback function to validate the campaign.
 */
function _rte_mis_state_campaign_validate(&$form, FormStateInterface $form_state) {
  $current_academic_year = _rte_mis_state_get_current_academic_year();
  // Validate only if the current campaign that is getting created is in active
  // state.
  $campaign_active = $form_state->getValue('field_activate_campaign');
  // Get the current mini_node id.
  $campaign_id = 0;
  $campaign = \Drupal::routeMatch()->getParameter('mini_node');
  if (!empty($campaign)) {
    $campaign_id = $campaign->id();
  }
  if (!empty($campaign_active) && $campaign_active['value']) {
    // Check if there are any existing active campaign for the same academic
    // year.
    $campaign_query = \Drupal::entityTypeManager()->getStorage('mini_node')->getQuery();
    $campaign_query->accessCheck(TRUE)
      ->condition('type', 'campaign')
      ->condition('field_academic_year', $current_academic_year)
      ->condition('field_activate_campaign', 1)
      ->condition('id', $campaign_id, '!=');
    $nids = $campaign_query->execute();

    if (count($nids) > 0) {
      $form_state->setErrorByName('field_academic_year', t('Two campaign cannot be in active state.'));
    }
  }
}

/**
 * Implements hook_cron().
 */
function rte_mis_state_cron() {
  $school_registration = \Drupal::service('rte_mis_state.state_helper')->isCampaignValid('school_registration');
  // Check if school registration is open. If YES and rebuild the cache to show
  // the set of links.
  if ($school_registration) {
    // Rebuild the cache.
    drupal_flush_all_caches();
  }
}

/**
 * Implements hook_entity_update().
 */
function rte_mis_state_entity_update(EntityInterface $entity) {
  _rte_mis_state_invalidate_cache($entity);
}

/**
 * Implements hook_entity_insert().
 */
function rte_mis_state_entity_insert(EntityInterface $entity) {
  _rte_mis_state_invalidate_cache($entity);
}

/**
 * Callback function to invalidate the cache on campaign update.
 */
function _rte_mis_state_invalidate_cache(EntityInterface $entity) {
  // Get entity type id.
  $entity_type_id = $entity->getEntityTypeId();
  if ($entity_type_id === 'mini_node') {
    // Get bundle information.
    $bundle = $entity->get('type')->getString();
    if ($bundle == 'campaign') {
      // Flush the cache.
      drupal_flush_all_caches();
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function rte_mis_state_local_tasks_alter(&$local_tasks) {
  // Check if user registration local tasks exists.
  if (array_key_exists('user.register', $local_tasks)) {
    $local_tasks['user.register']['title'] = t('Create new School Account');
  }
}

/**
 * AJAX callback function.
 */
function rte_mis_state_roles_ajax_callback(&$form, $form_state) {
  return $form['location_container'];
}

/**
 * Callback function as custom submit handler.
 */
function rte_mis_state_user_location_field_set(array &$form, FormStateInterface &$form_state) {
  $roles = $form_state->getValue('roles');
  $highest_order_role = reset($roles);

  $term_id = $form_state->getValue('location_parent');

  if (in_array($highest_order_role, ['district_admin', 'block_admin']) && !$term_id) {
    $form_state->setErrorByName('location_parent', t('For selected user roles, you need to enter the location details.'));
    return;
  }

  if ($term_id) {
    $term = Term::load($term_id);
    if ($term) {
      $parent_term = $term->parent->target_id;
      $term_type = ($parent_term == '0') ? 'district' : 'block';

      if ($highest_order_role == 'district_admin' && $term_type !== 'district') {
        $form_state->setErrorByName('roles', t('District admin role requires users to fill in the district details in the location section.'));
        return;
      }

      if ($highest_order_role == 'block_admin' && $term_type !== 'block') {
        $form_state->setErrorByName('roles', t('Block admin role requires users to fill in the block details in the location section.'));
        return;
      }
    }
  }

  $form_state->setValue('field_location_details', $term_id);
}

/**
 * Implements hook_module_implements_alter().
 */
function rte_mis_state_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['rte_mis_state'])) {
    // Remove our custom module's implementation.
    $rte_mis_state_form_alter = $implementations['rte_mis_state'];
    unset($implementations['rte_mis_state']);

    // Add it back at the end.
    $implementations['rte_mis_state'] = $rte_mis_state_form_alter;
  }
}

/**
 * Implements hook_form_ID_alter().
 */
function rte_mis_state_form_user_form_alter(&$form, &$form_state, $form_id) {

  $current_user = \Drupal::currentUser();
  // Get the current user ID.
  $current_user_id = $current_user->id();
  if ($current_user->hasPermission('manage_user_roles')) {
    $form['account']['roles']['#access'] = TRUE;
  }
  // Check the current path.
  $current_path = \Drupal::service('path.current')->getPath();

  // Create a custom link.
  $user_edit_path = Url::fromRoute('entity.user.edit_form', ['user' => $current_user_id])->toString();

  // Check if its current user's edit page.
  if ($current_path == $user_edit_path) {
    // Make the roles field read-only.
    $form['account']['roles']['#attributes']['readonly'] = 'readonly';
    $form['account']['roles']['#attributes']['disabled'] = 'disabled';
  }

}

/**
 * Implements hook_views_query_alter().
 */
function rte_mis_state_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'school_udise_code' && $view->current_display == 'page_1') {
    $vocabulary = Vocabulary::load('school_udise_code');

    if ($vocabulary) {
      // Check if there are any terms in the vocabulary.
      $term_count = \Drupal::entityQuery('taxonomy_term')
        ->condition('vid', $vocabulary->id())
        ->count()
        ->accessCheck(TRUE)
        ->execute();

      if ($term_count > 0) {
        // Getting the current user.
        $user = \Drupal::currentUser();
        $curr_user = User::load($user->id());
        // Get the current user role.
        $curr_user_role = $curr_user->getRoles();
        // Check if they have district admin role assigned to them.
        if (in_array('district_admin', $curr_user_role)) {
          $definition = [
            'table' => 'taxonomy_term__field_location',
            'field' => 'entity_id',
            'left_table' => 'taxonomy_term_field_data',
            'left_field' => 'tid',
            'type' => 'INNER',
          ];
          $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
          // Joining the term__field_location & term_field_data.
          $query->addRelationship('taxonomy_term__field_location', $join, 'taxonomy_term_field_data');
          $curr_user_location = $curr_user->get('field_location_details')->getString() ? $curr_user->get('field_location_details')->getString() : NULL;
          // Used to fetch the blocks under the current user's district.
          $terms_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('location', $curr_user_location, 1, TRUE);
          $field_location_arr = [];
          // Adding each block's id to an array.
          foreach ($terms_tree as $term) {
            $field_location = $term->id();
            $field_location_arr[] = $field_location;
          }
          $value = 0;
          if (!empty($field_location_arr)) {
            // Storing the value of array elements in string seperated by ','.
            $value = implode(',', $field_location_arr);
          }
          $individual = 'individual';
          // Adding an extra condition to the existing conditions.
          $query->addWhereExpression(1, "taxonomy_term__field_location.field_location_target_id IN ($value)");
        }
      }
    }
  }
  elseif ($view->id() == 'school_udise_code' && $view->current_display == 'page_2') {
    $vocabulary = Vocabulary::load('school_udise_code');

    if ($vocabulary) {
      // Check if there are any terms in the vocabulary.
      $term_count = \Drupal::entityQuery('taxonomy_term')
        ->condition('vid', $vocabulary->id())
        ->count()
        ->accessCheck(TRUE)
        ->execute();

      if ($term_count > 0) {
        // Getting the current user.
        $user = \Drupal::currentUser();
        $curr_user = User::load($user->id());
        // Get the current user role.
        $curr_user_role = $curr_user->getRoles();
        // Check if they have district admin role assigned to them.
        if (in_array('district_admin', $curr_user_role)) {
          $definition = [
            'table' => 'taxonomy_term__field_location',
            'field' => 'entity_id',
            'left_table' => 'taxonomy_term_field_data',
            'left_field' => 'tid',
            'type' => 'INNER',
          ];
          $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
          // Joining the term__field_location & term_field_data.
          $query->addRelationship('taxonomy_term__field_location', $join, 'taxonomy_term_field_data');
          $new_definition = [
            'table' => 'taxonomy_term__field_upload_type',
            'field' => 'entity_id',
            'left_table' => 'taxonomy_term_field_data',
            'left_field' => 'tid',
            'type' => 'INNER',
          ];
          $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $new_definition);
          // Joining the term__field_location & term_field_data.
          $query->addRelationship('taxonomy_term__field_upload_type', $join, 'taxonomy_term_field_data');
          // Get the current user's location detail.
          $curr_user_location = $curr_user->get('field_location_details')->getString() ? $curr_user->get('field_location_details')->getString() : NULL;
          // Load the location vocabulary of the current user's location.
          // Used to fetch the blocks under the current user's district.
          $terms_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('location', $curr_user_location, 1, TRUE);
          $field_location_arr = [];
          // Adding each block's id to an array.
          foreach ($terms_tree as $term) {
            $field_location = $term->id();
            $field_location_arr[] = $field_location;
          }
          $value = 0;
          if (!empty($field_location_arr)) {
            // Storing the value of array elements in string seperated by ','.
            $value = implode(',', $field_location_arr);
          }
          $individual = 'individual';
          // Adding an extra condition to the existing conditions.
          $query->addWhereExpression(1, "taxonomy_term__field_location.field_location_target_id IN ($value)");
          $query->addWhereExpression(1, "taxonomy_term__field_upload_type.field_upload_type_value = '$individual'");
        }
      }
    }
  }

}

/**
 * Implements hook_user_login().
 */
function rte_mis_state_user_login(AccountInterface $account) {
  // Check if the user has the 'district_admin' role.
  if ($account->hasRole('district_admin')) {
    // Invalidate the cache of the "school_udise_code" view.
    Cache::invalidateTags(['config:views.view.school_udise_code']);
  }
}
