<?php

/**
 * @file
 * Contains rte_mis_state.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\cshs\Component\CshsOption;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\sms\Direction;
use Drupal\sms\Message\SmsMessage;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\workflow\Entity\WorkflowTransitionInterface;

/**
 * Callback function to provide the current academic year.
 */
function rte_mis_state_academic_year(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  // Get current academic year.
  $current_academic_year = _rte_mis_core_get_current_academic_year();

  $options = [
    "$current_academic_year" => str_replace('_', '-', $current_academic_year),
  ];

  return $options;
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_state_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $views = $form_state->getStorage('view');
  // Add the academic_session academic year validation.
  if (in_array($form_id, [
    'mini_node_academic_session_form',
    'mini_node_academic_session_edit_form',
  ])) {
    $form['#validate'][] = '_rte_mis_state_academic_session_validate';
  }
  elseif ($form_id == 'taxonomy_term_school_form') {
    $current_user = \Drupal::currentUser();
    // Get roles of current user.
    $current_user_roles = $current_user->getRoles();
    if (array_intersect($current_user_roles, ['district_admin', 'block_admin'])) {
      $options = [];
      $form['#attached']['library'][] = 'rte_mis_core/disable_cshs_select';
      $form['field_location']['#attributes']['class'][] = 'location-details';
      // Load Current User.
      $current_user_data = User::load($current_user->id());
      // Get the location id of the current user.
      $current_user_location_id = $current_user_data->get('field_location_details')->getString() ?? '';
      if (in_array('district_admin', $current_user_roles) && !empty($current_user_location_id)) {
        $current_user_taxonomy_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($current_user_location_id);
        // Load the blocks for the current district users.
        $terms_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('location', $current_user_location_id, 1, TRUE);
        // Default Value for the options.
        $options[(int) $current_user_taxonomy_term->id()] = new CshsOption($current_user_taxonomy_term->label());
        // Passing the block options to the cshs element.
        foreach ($terms_tree as $term) {
          $options[(int) $term->id()] = new CshsOption($term->label(), (int) $term->parent->target_id == 0 ? NULL : $term->parent->target_id);
        }
        $form['#attached']['drupalSettings']['role'] = 'district';
      }
      elseif (in_array('block_admin', $current_user_roles) && !empty($current_user_location_id)) {
        // Load the blocks for the current district users.
        $terms_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($current_user_location_id);
        // Get the district id.
        $term_tree = array_keys($terms_tree);
        // Load the district details to make it an option.
        $current_user_district = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_tree[0]);
        // Load the block details to make it an option.
        $current_user_block = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($current_user_location_id);
        // Default Value for the options.
        $options[(int) $current_user_district->id()] = new CshsOption($current_user_district->label());
        $options[(int) $current_user_block->id()] = new CshsOption($current_user_block->label(), (int) $current_user_district->id() == 0 ? NULL : $current_user_district->id());
        $form['#attached']['drupalSettings']['role'] = 'block';
      }
      $form['field_location']['widget'][0]['target_id']['#options'] = $options ?? [];
      $default_value = $form['field_location']['widget'][0]['target_id']['#default_value'] ?? NULL;
      $form['field_location']['widget'][0]['target_id']['#default_value'] = $default_value != 'All' ? $default_value : $current_user_location_id;
      if (isset($form['revision'])) {
        $form['revision']['#access'] = FALSE;
      }
    }
  }
  elseif (in_array($form_id, ['user_register_form', 'user_form'])) {
    // Get the current user.
    $current_user = \Drupal::currentUser();
    // Get the current user's roles.
    $current_user_roles = $current_user->getRoles();
    $current_user_id = $current_user->id();
    // Get the current route match.
    $form['account']['pass']['#description'] = t(
      'Your password must meet the following criteria:
      <ul>
        <li>Be at least 6 characters long</li>
        <li>Contain at least one letter</li>
        <li>Contain at least one number</li>
        <li>Contain at least one special character</li>
      </ul>'
    );

    $form['account']['roles']['#ajax'] = [
      'callback' => 'rte_mis_state_roles_ajax_callback',
      'wrapper' => 'wrapper',
      'progress' => [
        'type' => 'fullscreen',
      ],
    ];

    if (isset($form['field_admin_details'])) {
      $form['field_admin_details'] += [
        '#states' => [
          'invisible' => [
            ':input[name="roles"]' => [
              ['value' => 'school_admin'],
              ['value' => 'authenticated'],
            ],
          ],
        ],
      ];

      $form['field_location_details']['#prefix'] = '<div id="wrapper">';
      $form['field_location_details']['#suffix'] = '</div>';

      $form['field_location_details']['#states'] = [
        'visible' => [
          ':input[name="roles"]' => [
            ['value' => 'district_admin'],
            ['value' => 'block_admin'],
          ],
        ],
      ];
      // Mapping for different roles.
      $role_mappings = [
        'state_admin' => [
          'district_admin' => 'District Admin',
          'block_admin' => 'Block Admin',
        ],
        'district_admin' => [
          'block_admin' => 'Block Admin',
        ],
        'block_admin' => [
          'authenticated' => 'Authenticated User',
        ],
      ];

      // Based on current user role.
      // Check for the user roles they can create account.
      $current_user_role = $current_user_roles[1] ?? '';
      if (!empty($current_user_role)) {
        if (isset($role_mappings[$current_user_role])) {
          // Check if the current user is editing own user info. If YES then
          // don't allow them to change the location.
          $user = \Drupal::routeMatch()->getParameter('user');
          $current_edit_user_id = NULL;
          if ($user instanceof UserInterface) {
            $current_edit_user_id = $user->id();
          }
          if ($current_edit_user_id == $current_user_id) {
            $form['field_location_details']['widget'][0]['target_id']['#attributes']['readonly'] = 'readonly';
            $form['field_location_details']['widget'][0]['target_id']['#attributes']['disabled'] = 'disabled';
            $form['account']['status']['#access'] = FALSE;
            // Update the roles options in the form, if the element is set.
            if (isset($form['account']['roles'])) {
              $form['account']['roles']['#attributes']['readonly'] = 'readonly';
              $form['account']['roles']['#attributes']['disabled'] = 'disabled';
            }
          }
          else {
            // Logic for user register form.
            if ($form_id == 'user_register_form' && $role_mappings[$current_user_role]) {
              // Check for query parameters in the url.
              $role_param = \Drupal::request()->query->get('role') ?? NULL;
              if ($role_param) {
                // If current user role is `state_admin`
                // then display roles according to the `$role_param`.
                if ($current_user_role == 'state_admin') {
                  if ($role_param == 'block_admin') {
                    $form['account']['roles']['#options'] = $role_mappings[$current_user_role];
                    $form['account']['roles']['#default_value'] = 'block_admin';
                    $form['account']['roles']['#disabled'] = 'disabled';
                    $form_state->setValue('roles', ['block_admin']);
                    $form['field_location_details'] = rte_mis_state_roles_ajax_callback($form, $form_state);
                  }
                  elseif ($role_param == 'district_admin') {
                    $form['account']['roles']['#options'] = $role_mappings[$current_user_role];
                    $form['account']['roles']['#default_value'] = 'district_admin';
                    $form['account']['roles']['#disabled'] = 'disabled';
                    $form_state->setValue('roles', ['district_admin']);
                    $form['field_location_details'] = rte_mis_state_roles_ajax_callback($form, $form_state);
                  }
                  else {
                    $form['account']['roles']['#options'] = $role_mappings[$current_user_role];
                  }
                }
                // If current user role is `district_admin`
                // then display roles according to the roles mapped.
                elseif ($current_user_role = 'district_admin') {
                  $form['#attached']['library'][] = 'rte_mis_core/disable_cshs_select';
                  $form['field_location_details']['#attributes']['class'][] = 'location-details';
                  $form['#attached']['drupalSettings']['role'] = 'district';
                  $form['account']['roles']['#options'] = $role_mappings[$current_user_role];
                  $form['account']['roles']['#default_value'] = 'block_admin';
                  $form['account']['roles']['#disabled'] = 'disabled';
                  $form_state->setValue('roles', ['block_admin']);
                  $form['field_location_details'] = rte_mis_state_roles_ajax_callback($form, $form_state);

                }
              }
              else {
                $form['account']['roles']['#options'] = $role_mappings[$current_user_role];
              }
            }
            elseif ($form_id == 'user_form' && $role_mappings[$current_user_role]) {
              if ($current_user_role == 'state_admin') {
                $form['account']['roles']['#options'] = $role_mappings[$current_user_role];
              }
              elseif ($current_user_role == 'district_admin') {
                $form['#attached']['library'][] = 'rte_mis_core/disable_cshs_select';
                $form['field_location_details']['#attributes']['class'][] = 'location-details';
                $form['#attached']['drupalSettings']['role'] = 'district';
                $form['account']['roles']['#options'] = $role_mappings[$current_user_role];
                $form['account']['roles']['#default_value'] = 'block_admin';
                $form['account']['roles']['#disabled'] = 'disabled';
                $form_state->setValue('roles', ['block_admin']);
                $form['field_location_details'] = rte_mis_state_roles_ajax_callback($form, $form_state);
              }
            }
          }
        }
      }

      // Check for the roles element value using form_state.
      $user = \Drupal::routeMatch()->getParameter('user');
      $current_edit_user_roles = [];
      if ($user instanceof UserInterface) {
        $current_edit_user_roles = $user->getRoles();
      }
      // Check If district admin or block admin present in roles.
      if (in_array('district_admin', $current_edit_user_roles) || in_array('block_admin', $current_edit_user_roles)) {
        $form['field_admin_details']['#required'] = TRUE;
        // Default depth for district admin.
        $depth = 1;
        if (in_array('block_admin', $current_edit_user_roles)) {
          // Modify depth to 2 for block admin.
          $depth = 2;
        }
        // Load the data which will be passed as options to the cshs element.
        $terms_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('location', 0, $depth, TRUE);
        $options = [];
        // Passing the options to the cshs element.
        foreach ($terms_tree as $term) {
          $options[(int) $term->id()] = new CshsOption($term->label(), (int) $term->parent->target_id == 0 ? NULL : $term->parent->target_id);
        }
        $form['field_location_details']['widget'][0]['target_id']['#options'] = $options ?? [];
      }
      // Custom validate handler.
      $form['#validate'][] = 'rte_mis_state_user_location_field_set';
    }
  }
  // Form alter for the people view page form.
  elseif ($form_id == 'views_exposed_form' && isset($views) && $views['view']->id() == 'administerusersbyrole_people') {
    $role_param = \Drupal::request()->query->get('role') ?? NULL;
    $curr_user_role = \Drupal::currentUser()->getRoles();

    if (in_array('state_admin', $curr_user_role)) {
      $form['role']['#options'] = [
        'All' => t('All'),
        'school' => t('School'),
        'school_admin' => t('School Admin'),
        'block_admin' => t('Block Admin'),
        'district_admin' => t('District Admin'),
      ];
      if ($role_param == 'block_admin') {
        $form['role']['#default_value'] = 'block_admin';
      }
      elseif ($role_param == 'district_admin') {
        $form['role']['#default_value'] = 'district_admin';
      }
      else {
        $form['role']['#default_value'] = 'All';
      }
      $form['permission']['#access'] = FALSE;
    }
    elseif (in_array('district_admin', $curr_user_role)) {
      $form['role']['#options'] = [
        'All' => t('All'),
        'block_admin' => t('Block Admin'),
      ];
      $form['role']['#default_value'] = 'block_admin';
      $form['permission']['#access'] = FALSE;
    }
  }
  elseif ($form_id == 'views_form_administerusersbyrole_people_page_1') {
    $curr_user_role = \Drupal::currentUser()->getRoles();
    if (!in_array('app_admin', $curr_user_role)) {
      $form['header']['user_bulk_form']['#access'] = FALSE;
    }
  }
}

/**
 * AJAX callback function.
 */
function rte_mis_state_roles_ajax_callback(&$form, $form_state) {
  $entity_repository = \Drupal::service('entity.repository');
  $current_user = \Drupal::currentUser();
  $user = User::load($current_user->id());
  $curr_user_role = $user->getRoles();
  // Get the rte_mis_core settings.
  $configSettings = \Drupal::configFactory()->get('rte_mis_core.settings');
  // Get the categorization setting from config.
  $categorizationDepth = $configSettings->get('location_schema.depth');
  $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $locationParentTerms = $termStorage->loadTree('location_schema', 0, $categorizationDepth, TRUE);
  $labels = [];
  foreach ($locationParentTerms as $term) {
    $term = $entity_repository->getTranslationFromContext($term);
    $labels[] = $term->label();
  }
  // Get the current user location details.
  $curr_user_location_id = $user->get('field_location_details')->getString();
  if ($selected_roles = $form_state->getValue('roles')) {
    // Check If district admin or block admin present in roles.
    $options = [];
    if (in_array('district_admin', $selected_roles) || in_array('block_admin', $selected_roles)) {
      // Default start value for the any current user role.
      $start = 0;
      // Default depth for district admin.
      $depth = 1;
      if (in_array('block_admin', $selected_roles)) {
        // District admin, should only add block admins under their district.
        if (in_array('district_admin', $curr_user_role) && $curr_user_location_id) {
          $start = $curr_user_location_id;
          $current_user_taxonomy_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($curr_user_location_id);
          // District's default value for district admin.
          $options[(int) $current_user_taxonomy_term->id()] = new CshsOption($current_user_taxonomy_term->label());
          $form['field_location_details']['widget'][0]['target_id']['#no_first_level_none'] = TRUE;
          $form['field_location_details']['widget'][0]['target_id']['#default_value'] = !empty($curr_user_location_id) ? $curr_user_location_id : NULL;
        }
        else {
          // Modify depth to 2 for block admin.
          $depth = 2;
        }
      }
      // Load the data which will be passed as options to the cshs element.
      $terms_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('location', $start, $depth, TRUE);
      // Passing the options to the cshs element.
      foreach ($terms_tree as $term) {
        $term = $entity_repository->getTranslationFromContext($term);
        $options[(int) $term->id()] = new CshsOption($term->label(), (int) $term->parent->target_id == 0 ? NULL : $term->parent->target_id);
      }
      $form['field_location_details']['widget'][0]['target_id']['#options'] = $options ?? [];
      $form['field_location_details']['widget'][0]['target_id']['#labels'] = $labels ?? [];
    }
  }
  return $form['field_location_details'];
}

/**
 * Callback function as custom submit handler.
 */
function rte_mis_state_user_location_field_set(array &$form, FormStateInterface &$form_state) {
  $roles = $form_state->getValue('roles');
  $highest_order_role = reset($roles);

  $term_id = $form_state->getValue('field_location_details');

  if (!empty($term_id)) {
    $term_id = $term_id[0]['target_id'];
  }

  if (in_array($highest_order_role, ['district_admin', 'block_admin']) && !$term_id) {
    $form_state->setErrorByName('location_parent', t('For selected user roles, you need to enter the location details.'));
    return;
  }

  // Ensure only one State Admin exists.
  if ($highest_order_role == 'state_admin') {
    $query = \Drupal::entityQuery('user')
      ->condition('roles', 'state_admin')
      ->accessCheck(FALSE);
    $result = $query->execute();
    if (!empty($result)) {
      $form_state->setErrorByName('roles', t('Only one State Admin role is allowed.'));
      return;
    }
  }

  if ($term_id) {
    $term = Term::load($term_id);
    if ($term) {
      $parent_term = $term->parent->target_id;
      $term_type = ($parent_term == '0') ? 'district' : 'block';
      // One district can have a single district admin.
      if ($highest_order_role == 'district_admin' && $term_type == 'district') {
        $query = \Drupal::entityQuery('user')
          ->condition('roles', 'district_admin')
          ->condition('field_location_details', $term_id)
          ->accessCheck(FALSE);
        $result = $query->execute();
        if (!empty($result)) {
          $form_state->setErrorByName('roles', t('Only one district admin role is allowed per district.'));
          return;
        }
      }

      if ($highest_order_role == 'district_admin' && $term_type !== 'district') {
        $form_state->setErrorByName('roles', t('District admin role requires users to fill in the district details in the location section.'));
        return;
      }

      if ($highest_order_role == 'block_admin' && $term_type !== 'block') {
        $form_state->setErrorByName('roles', t('Block admin role requires users to fill in the block details in the location section.'));
        return;
      }
    }
  }

  // Clear the CHSH option error message which appear because of changing the
  // options. In our case its possible to get that error because we are changing
  // the option because of different roles.
  // $form_state->clearErrors();
}

/**
 * Callback function to validate the academic_session.
 */
function _rte_mis_state_academic_session_validate(&$form, FormStateInterface $form_state) {
  $academic_session_academic_year = _rte_mis_core_get_current_academic_year();
  // Validate only if the current academic_session that is getting created is in
  // active state.
  $academic_session_active = $form_state->getValue('status');
  // Get the current mini_node id.
  $academic_session_id = 0;
  $academic_session = \Drupal::routeMatch()->getParameter('mini_node');
  if (!empty($academic_session)) {
    $academic_session_id = $academic_session->id();
  }
  // Get the entity.
  $entity = $form_state->getformObject()->getEntity();
  // Get the name of triggering element.
  $name = $form_state->getTriggeringElement()['#name'] ?? NULL;
  $timeline = $form_state->getValue('field_session_details');
  // Get all the referenced paragraph.
  $referencedTimeline = $entity->get('field_session_details')->referencedEntities();
  // Prepare the array with the require details.
  $current_entity_options = array_map(function ($item) {
    return [
      'event_type' => $item->get('field_event_type')->getString(),
      'start_date' => $item->get('field_date')->value,
      'end_date' => $item->get('field_date')->end_value,
    ];
  }, $referencedTimeline);
  if (is_numeric($entity->id()) && $name == 'op') {
    // Load the unsaved entity.
    $original_entity = \Drupal::entityTypeManager()
      ->getStorage('mini_node')
      ->loadUnchanged($entity->id());
    // Get all the referenced paragraph.
    $original_entity = $original_entity->get('field_session_details')->referencedEntities();
    // Prepare the array with the require details.
    $original_entity_options = array_map(function ($item) {
      return [
        'event_type' => $item->get('field_event_type')->getString(),
        'start_date' => $item->get('field_date')->value,
        'end_date' => $item->get('field_date')->end_value,
      ];
    }, $original_entity);
    // Current date.
    $current_date = new DrupalDateTime();
    // Check if existing timeline is update with older date.
    foreach ($current_entity_options as $key => $value) {
      // Check if date has been changed for the same timeline.
      if ($current_entity_options[$key]['event_type'] == $original_entity_options[$key]['event_type'] && ($current_entity_options[$key]['start_date'] != $original_entity_options[$key]['start_date'] || $current_entity_options[$key]['end_date'] != $original_entity_options[$key]['end_date'])) {
        $current_entity_start_date = new DrupalDateTime($current_entity_options[$key]['start_date']);
        $current_entity_end_date = new DrupalDateTime($current_entity_options[$key]['end_date']);
        $current_start_date_diff = $current_entity_start_date->diff($current_date);
        $current_end_date_diff = $current_entity_end_date->diff($current_date);
        // Check if older date is used in timeline.
        if (($current_start_date_diff->d > 0 && $current_start_date_diff->invert == 0) || ($current_end_date_diff->d > 0 && $current_end_date_diff->invert == 0)) {
          $form_state->setErrorByName('field_session_details][' . $key, t('Cannot use old date. Please select current/future date in timeline.'));
        }
      }
    }
    // Check if new timeline is added with older date.
    foreach ($timeline as $key => $value) {
      if (isset($timeline[$key]['subform'])) {
        $start_date = $timeline[$key]['subform']['field_date'][0]['value'] ?? $current_date;
        $end_date = $timeline[$key]['subform']['field_date'][0]['end_value'] ?? $current_date;
        $start_date_diff = $start_date->diff($current_date);
        $end_date_diff = $end_date->diff($current_date);
        // Check if older date is used in timeline.
        if (($start_date_diff->d > 0 && $start_date_diff->invert == 0) || ($end_date_diff->d > 0 && $end_date_diff->invert == 0)) {
          $form_state->setErrorByName('field_session_details][' . $key, t('Cannot use old date. Please select current/future date in timeline.'));
        }
      }
    }
  }

  if (!empty($academic_session_active) && $academic_session_active['value']) {
    // Check if there are any existing active academic_session for the same
    // academic year.
    $academic_session_query = \Drupal::entityTypeManager()->getStorage('mini_node')->getQuery();
    $academic_session_query->accessCheck(TRUE)
      ->condition('type', 'academic_session')
      ->condition('field_academic_year', $academic_session_academic_year)
      ->condition('status', 1)
      ->condition('id', $academic_session_id, '!=');
    $nids = $academic_session_query->execute();

    if (count($nids) > 0) {
      $form_state->setErrorByName('field_academic_year', t('Two academic session cannot be in active state.'));
    }
  }
}

/**
 * Implements hook_cron().
 */
function rte_mis_state_cron() {
  $school_registration = \Drupal::service('rte_mis_core.core_helper')->isAcademicSessionValid('school_registration');
  // Check if school registration is open. If YES and rebuild the cache to show
  // the set of links.
  if ($school_registration) {
    // Rebuild the cache.
    drupal_flush_all_caches();
  }
}

/**
 * Implements hook_entity_update().
 */
function rte_mis_state_entity_update(EntityInterface $entity) {
  _rte_mis_state_invalidate_cache($entity);
}

/**
 * Implements hook_entity_insert().
 */
function rte_mis_state_entity_insert(EntityInterface $entity) {
  _rte_mis_state_invalidate_cache($entity);
}

/**
 * Callback function to invalidate the cache on academic_session update.
 */
function _rte_mis_state_invalidate_cache(EntityInterface $entity) {
  // Get entity type id.
  $entity_type_id = $entity->getEntityTypeId();
  if ($entity_type_id === 'mini_node') {
    // Get bundle information.
    $bundle = $entity->get('type')->getString();
    if ($bundle == 'academic_session') {
      // Flush the cache.
      drupal_flush_all_caches();
    }
    elseif ($bundle == 'school_details') {
      // Rebuild the menu links.
      \Drupal::service('plugin.manager.menu.link')->rebuild();
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function rte_mis_state_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['rte_mis_state'])) {
    // Remove our custom module's implementation.
    $rte_mis_state_form_alter = $implementations['rte_mis_state'];
    unset($implementations['rte_mis_state']);

    // Add it back at the end.
    $implementations['rte_mis_state'] = $rte_mis_state_form_alter;
  }
}

/**
 * Implements hook_form_ID_alter().
 */
function rte_mis_state_form_user_form_alter(&$form, &$form_state, $form_id) {

  $current_user = \Drupal::currentUser();
  if ($current_user->hasPermission('manage_user_roles')) {
    $form['account']['roles']['#access'] = TRUE;
  }
}

/**
 * Implements hook_views_query_alter().
 */
function rte_mis_state_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'school' && in_array($view->current_display, ['page_1', 'page_2'])) {
    $user = \Drupal::currentUser();
    // Get the current user role.
    $current_user_roles = $user->getRoles();
    $current_user = User::load($user->id());
    // Only applicable for district and block admins.
    if (array_intersect($current_user_roles, ['district_admin', 'block_admin']) && $current_user instanceof UserInterface) {
      $id = rte_mis_state_get_location_child($current_user);
      $definition = [
        'table' => 'taxonomy_term__field_location',
        'field' => 'entity_id',
        'left_table' => 'taxonomy_term_field_data',
        'left_field' => 'tid',
        'type' => 'INNER',
      ];
      $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
      // Joining the term__field_location & term_field_data.
      $query->addRelationship('taxonomy_term__field_location', $join, 'taxonomy_term_field_data');
      $query->addWhere(0, 'taxonomy_term__field_location.field_location_target_id', $id, 'IN');
    }
  }
  elseif ($view->id() == 'administerusersbyrole_people' && $view->current_display == 'page_1') {
    $user = \Drupal::currentUser();
    // Get the roles of the current user.
    $current_user_roles = $user->getRoles();
    $current_user = User::load($user->id());
    if (in_array('state_admin', $current_user_roles) && $current_user instanceof UserInterface) {

      // Create a join definition using the service.
      $definition = [
        'table' => 'user__roles',
        'field' => 'entity_id',
        'left_table' => 'users_field_data',
        'left_field' => 'uid',
        'operator' => '=',
      ];
      $join = \Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
      $query->addRelationship('roles', $join, 'users_field_data');

      // Add a condition to filter by specific roles.
      $query->addWhere('role_filter', 'roles.roles_target_id', [
        'district_admin', 'block_admin',
        'school_admin', 'school',
      ], 'IN');
    }
    elseif (in_array('district_admin', $current_user_roles) && $current_user instanceof UserInterface) {
      $id = rte_mis_state_get_location_child($current_user);
      // Create left join for `field_location`.
      $definition = [
        'table' => 'user__field_location_details',
        'field' => 'entity_id',
        'left_table' => 'users_field_data',
        'left_field' => 'uid',
        'type' => 'LEFT',
      ];
      $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
      $query->addRelationship('user__field_location_details', $join, 'users_field_data');

      // Add condition to match for the user location
      // with the block admin location.
      $query->addWhere(0, 'user__field_location_details.field_location_details_target_id', $id, 'IN');
      $query->addWhere(0, 'users_field_data.uid', $user->id(), '<>');
    }
  }
}

/**
 * Implements hook_user_login().
 */
function rte_mis_state_user_login(AccountInterface $account) {
  // Check if the user has the 'district_admin' role.
  if ($account->hasRole('district_admin')) {
    // Invalidate the cache of the "school" view.
    Cache::invalidateTags(['config:views.view.school']);
  }
  elseif ($account->hasRole('school_admin')) {
    // Invalidate the cache of the "school_profile" view.
    Cache::invalidateTags(['config:views.view.school_profile']);
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function rte_mis_state_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'taxonomy_term') {
    // Get the view ID to target a specific view.
    $view_id = 'school';
    // Check if the entity is being viewed in the specified taxonomy term view.
    if (\Drupal::routeMatch()->getRouteName() == "view.$view_id.page_1") {
      // Remove the 'add-child' operation.
      unset($operations['add-child']);
    }
  }
  elseif ($entity->getEntityTypeId() == 'user') {
    // Check if the current route is `entity.user.collection`.
    if (\Drupal::routeMatch()->getRouteName() == "entity.user.collection") {
      // State Admin should not be shown the edit action
      // for the school & school admins.
      if (in_array('state_admin', \Drupal::currentUser()->getRoles()) && array_intersect(['school', 'school_admin'], $entity->getRoles())) {
        unset($operations['edit']);
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function rte_mis_state_views_pre_render(ViewExecutable $view) {
  // Check if the page is pending page.
  if ($view->id() == 'school' && $view->current_display == 'page_2') {
    // Add your custom cache tag.
    $view->element['#cache']['tags'][] = 'taxonomy_term_list:school';
  }
  elseif ($view->id() == 'administerusersbyrole_people') {
    $current_user_role = \Drupal::currentUser()->getRoles();
    if (in_array('state_admin', $current_user_role)) {
      // Get the current request.
      $role_request = \Drupal::request()->query->get('role') ?? NULL;
      if ($role_request == 'block_admin') {
        $view->setTitle(t('Block Users'));
      }
      elseif ($role_request == 'district_admin') {
        $view->setTitle(t('District Users'));
      }
      else {
        $view->setTitle(t('Users'));
      }
    }
    elseif (in_array('district_admin', $current_user_role)) {
      // Get the current request.
      $role_request = \Drupal::request()->query->get('role') ?? NULL;
      if ($role_request == 'block_admin') {
        $view->setTitle(t('Block Users'));
      }
      else {
        $view->setTitle(t('Users'));
      }
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function rte_mis_state_user_presave(UserInterface $account) {
  // Check if the current user has the district admin role.
  if ($account->hasRole('district_admin')) {
    // Invalidate cache tag when user data is updated.
    $cache_tags = ['taxonomy_term_list:school'];
    Cache::invalidateTags($cache_tags);
  }
}

/**
 * Implements hook_workflow().
 */
function rte_mis_state_workflow($op, WorkflowTransitionInterface $transition, UserInterface $user) {
  if ($op == 'transition pre' && $transition->wid->getString() == 'school_registration_verification' && $transition->getTargetEntityTypeId() == 'mini_node' && $transition->hasStateChange()) {
    $config_factory = \Drupal::service('config.factory');
    // Get the mail settings and messages.
    $mailConfig = $config_factory->get('rte_mis_mail.settings');
    // Get the entity id of the linked school.
    $school_entity_id = $transition->entity_id->getString();
    // Now load user based on the identified mini node.
    $user = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties([
      'field_school_details' => $school_entity_id,
    ]);
    $sms_provider = \Drupal::service('sms.provider');

    if ($user) {
      $user = reset($user);
      $user_mobile_number = $user->get('field_phone_number')->value;
      $user_email_id = $user->getEmail();

      // Check if sending email is enabled.
      $email_status = $mailConfig->get('school_notification_email.enabled_email_notification') ?? '';
      // Email subject & body.
      $email_subject = $mailConfig->get('school_notification_email.email_notification_subject') ?? '';
      $raw_email_body = $mailConfig->get('school_notification_email.email_notification_message') ?? '';

      // Replace the tokens.
      $modified_email_body = str_replace([
        '!user',
        '!existing_state',
        '!modified_state',
      ],
      [
        $user->getDisplayName(),
        $transition->getFromState()->label(),
        $transition->getToState()->label(),
      ], $raw_email_body);

      if ($email_status) {
        $params = [];
        if (!empty($email_subject) && !empty($raw_email_body)) {
          $params['subject'] = $email_subject;
          $params['message'] = $modified_email_body;
        }

        $email_sent = \Drupal::service('plugin.manager.mail')->mail('rte_mis_state', 'state_change', $user_email_id, \Drupal::languageManager()->getCurrentLanguage(), $params);
      }
      // Check if sending sms is enabled.
      $sms_status = $mailConfig->get('mobile_number_notification.enable_mobile_number_notification') ?? '';
      // Get the sms body from the config.
      $sms_body = $mailConfig->get('mobile_number_notification.mobile_number_notification_message') ?? '';

      $modified_sms_body = str_replace([
        '!user',
        '!existing_state',
        '!modified_state',
      ],
      [
        $user->getDisplayName(),
        $transition->getFromState()->label(),
        $transition->getToState()->label(),
      ], $sms_body);

      if ($sms_status) {
        $sms_sent = (new SmsMessage())
          // Set the message.
          ->setMessage($modified_sms_body)
          // Set recipient phone number.
          ->addRecipient($user_mobile_number)
          ->setDirection(Direction::OUTGOING);
        $sms_provider->send($sms_sent);
      }
    }

    if (isset($email_sent)) {
      \Drupal::logger('School verification status')->notice(t("Email has been sent to @user regarding their application status from @previous to @latest", [
        '@user' => $user->getDisplayName(),
        '@previous' => $transition->getFromState()->label(),
        '@latest' => $transition->getToState()->label(),
      ]));
    }
    else {
      \Drupal::logger('School verification status')->notice(t("Sending response status via email is not enabled."));
    }

    if (isset($sms_sent)) {
      \Drupal::logger('School verification status')->notice(t("SMS has been sent to @user regarding their application status from @previous to @latest", [
        '@user' => $user->getDisplayName(),
        '@previous' => $transition->getFromState()->label(),
        '@latest' => $transition->getToState()->label(),
      ]));
    }
    else {
      \Drupal::logger('School verification status')->notice(t("Sending response status via sms is not enabled."));
    }
  }
}

/**
 * Implements hook_mail().
 */
function rte_mis_state_mail($key, &$message, $params) {
  switch ($key) {
    case 'state_change':
      $message['subject'] = \Drupal::translation()->translate('@subject', ['@subject' => $params['subject']]);
      $message['body'][] = \Drupal::translation()->translate('@message', ['@message' => $params['message']]);
      break;
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function rte_mis_state_menu_local_actions_alter(&$local_actions) {
  if (isset($local_actions['user_admin_create'])) {
    // Define default properties for local actions.
    $local_actions['user_admin_create']['class'] = '\Drupal\rte_mis_state\Plugin\Menu\AlterPeopleActionTask';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rte_mis_state_preprocess_block(&$variables) {
  $route_match = \Drupal::routeMatch()->getRouteName();
  if ($route_match == 'user.admin_create' && $variables['plugin_id'] === 'page_title_block') {
    $role_param = \Drupal::request()->query->get('role') ?? NULL;
    if ($role_param == 'block_admin') {
      $variables['content']['#title'] = t('Add Block Admin');
    }
    elseif ($role_param == 'district_admin') {
      $variables['content']['#title'] = t('Add District Admin');
    }
    else {
      $variables['content']['#title'] = t('Add User');
    }
  }
  elseif (in_array($route_match, ['entity.user.canonical', 'entity.user.edit_form']) && $variables['plugin_id'] === 'page_title_block') {
    if ($variables['user'] instanceof AccountInterface) {
      $roles = $variables['user']->getAccount()->getRoles() ?? [];
      if (array_intersect($roles, ['app_admin', 'state_admin', 'district_admin', 'block_admin'])) {
        $variables['content']['#title']['#markup'] = str_replace('_', ' ', $variables['content']['#title']['#markup']);
      }
    }
  }
  elseif (in_array($route_match, ['eck.entity.add']) && $variables['plugin_id'] === 'page_title_block') {
    $current_arguments = $variables['content']['#title']->getArguments();
    $variables['content']['#title'] = t('Add %label', $current_arguments);

  }
}

/**
 * Implements hook_preprocess_HOOK() for breadcrumb.
 */
function rte_mis_state_preprocess_breadcrumb(array &$variables) {
  $route_match = \Drupal::routeMatch()->getRouteName();
  if (in_array($route_match, ['entity.user.canonical'])) {
    if (!empty($variables['breadcrumb'][2])) {
      $breadcrumb = str_replace('_', ' ', $variables['breadcrumb'][2]['text']);
      $breadcrumb = ucwords($breadcrumb);
      $variables['breadcrumb'][2]['text'] = $breadcrumb;
    }
  }
}

/**
 * Function to find the childs of a location of the User.
 *
 * @param Drupal\user\UserInterface $current_user
 *   Provides an interface defining a user entity.
 *
 * @return array
 *   Returns list of ids.
 */
function rte_mis_state_get_location_child(UserInterface $current_user) {
  $id = [0];
  if ($current_user instanceof UserInterface) {
    // Get the location details from user entity.
    $selected_location = $current_user->get('field_location_details')->entity ?? NULL;
    if ($selected_location instanceof TermInterface) {
      $location_tree = [];
      // Get the id of term assuming the user is block admin.
      $block_id = $id[] = $selected_location->id();
      // Load the tree if location based in block.
      if (!empty($block_id)) {
        $location_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('location', $block_id) ?? [];
      }
      if (!empty($location_tree)) {
        foreach ($location_tree as $value) {
          $id[] = $value->tid;
        }
      }
    }
  }
  return $id;
}
