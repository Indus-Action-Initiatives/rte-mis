<?php

/**
 * @file
 * Contains rte_mis_state.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Callback function to return the current academic year.
 */
function _rte_mis_state_get_current_academic_year() {
  $current_year = date('Y');
  $next_year = date('y', strtotime('+1 year'));

  return $current_year . '_' . $next_year;
}

/**
 * Callback function to provide the current academic year.
 */
function rte_mis_state_academic_year(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  // Get current academic year.
  $current_academic_year = _rte_mis_state_get_current_academic_year();

  $options = [
    "$current_academic_year" => str_replace('_', '-', $current_academic_year),
  ];

  return $options;
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_state_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add the campaign academic year validation.
  if (in_array($form_id, ['mini_node_campaign_form'])) {
    $form['#validate'][] = '_rte_mis_state_campaign_validate';
  }
}

/**
 * Callback function to validate the campaign.
 */
function _rte_mis_state_campaign_validate(&$form, FormStateInterface $form_state) {
  $current_academic_year = _rte_mis_state_get_current_academic_year();

  // Check if there are any existing campaign for the same academic year.
  $campaign = \Drupal::entityTypeManager()->getStorage('mini_node')->loadByProperties([
    'field_academic_year' => $current_academic_year,
    'field_activate_campaign' => 1,
  ]);

  if (count($campaign) > 0) {
    $form_state->setErrorByName('field_academic_year', t('Two campaign cannot be in active state.'));
  }
}

/**
 * Implements hook_cron().
 */
function rte_mis_state_cron() {
  $school_registration = \Drupal::service('rte_mis_state.state_helper')->isCampaignValid('school_registration');
  // Check if school registration is open. If YES and rebuild the cache to show
  // the set of links.
  if ($school_registration) {
    // Rebuild the cache.
    drupal_flush_all_caches();
  }
}

/**
 * Implements hook_entity_update().
 */
function rte_mis_state_entity_update(EntityInterface $entity) {
  // Get entity type id.
  $entity_type_id = $entity->getEntityTypeId();
  if ($entity_type_id === 'mini_node') {
    // Get bundle information.
    $bundle = $entity->get('type')->getString();
    if ($bundle == 'campaign') {
      // Flush the cache.
      drupal_flush_all_caches();
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function rte_mis_state_local_tasks_alter(&$local_tasks) {
  // Check if user registration local tasks exists.
  if (array_key_exists('user.register', $local_tasks)) {
    $local_tasks['user.register']['title'] = t('Create new School Account');
  }
}
