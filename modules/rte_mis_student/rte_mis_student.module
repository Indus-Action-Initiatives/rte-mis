<?php

/**
 * @file
 * Contains rte_mis_student.module.
 */

use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\rte_mis_student\Form\OverrideMiniNodeForm;
use Drupal\taxonomy\TermInterface;

/**
 * Populate the option for list fields.
 */
function rte_mis_student_default_field_options(FieldStorageDefinitionInterface $definition) {
  $options = [];
  // Get the field name.
  $field_name = $definition->getName();
  $config = \Drupal::config('rte_mis_student.settings')->get('field_default_options');
  $core_config = \Drupal::config('rte_mis_core.settings');
  $school_config = \Drupal::config('rte_mis_school.settings');
  switch ($field_name) {
    case 'field_gender':
    case 'field_caste':
    case 'field_address_proof':
    case 'field_birth_proof':
    case 'field_identity_proof':
    case 'field_religion':
    case 'field_applied_category':
    case 'field_ability':
    case 'field_document':
      // Get the field name with option defined.
      $defined_options = $config[$field_name] ?? NULL;
      if (isset($defined_options)) {
        $options = $defined_options;
      }
      break;

    case 'field_school':
      $results = \Drupal::entityQuery('taxonomy_term')
        ->accessCheck(TRUE)
        ->condition('vid', 'school')
        ->condition('status', 1)
        ->condition('field_workflow', 'school_workflow_approved')
        ->execute();
      if (!empty($results)) {
        $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
        foreach ($results as $value) {
          $term = $term_storage->load($value);
          if ($term instanceof TermInterface) {
            $options[$term->label()] = $term->field_school_name->getString();
          }
        }
      }
      break;

    case 'field_class':
      // Populate the field_class in student_details mini_node.
      // Get the class type(single|dual).
      $entry_class = $core_config->get('entry_class.class_type') ?? NULL;
      // Get the default option(1st class).
      $default_class_range = $school_config->get('field_default_options.field_default_entry_class') ?? NULL;
      $defined_options = rte_mis_school_get_education_level_options($default_class_range['from'] ?? NULL, $default_class_range['to'] ?? NULL);
      // If entry class is `dual` then fetch the class and merge the option in
      // default class.
      if ($entry_class == 'dual') {
        // Get the optional option(1st class).
        $optional_class_range = $school_config->get('field_default_options.field_optional_entry_class') ?? NULL;
        $defined_options += rte_mis_school_get_education_level_options($optional_class_range['from'] ?? NULL, $optional_class_range['to'] ?? NULL);
        // Sort the array based on key.
        ksort($defined_options, SORT_NUMERIC);
      }

      if (isset($defined_options)) {
        $options = $defined_options;
      }
      break;

    default:
      break;
  }
  return $options;
}

/**
 * Get the default option for fields when page is loaded without ajax event.
 *
 * This option are fetched from config `field_default_options`.
 *
 * @param string $ranged_field_name
 *   Dynamic option needed.
 * @param string $master_field_name
 *   Master field list.
 */
function rte_mis_student_get_default_options($ranged_field_name, $master_field_name) {
  $options = [
    '' => t('- Select -'),
  ];
  if (!empty($ranged_field_name) && !empty($master_field_name)) {
    $config = \Drupal::config('rte_mis_student.settings')->get('field_default_options');
    $master_field_value = $config[$master_field_name] ?? [];
    $ranged_field_value = $config[$ranged_field_name] ?? [];
    return $options + array_intersect_key($master_field_value, array_flip($ranged_field_value)) ?? $options;
  }
  return $options;
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_student_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // For mini_node student add/edit form.
  if (in_array($form_id, [
    'mini_node_student_details_form',
    'mini_node_student_details_edit_form',
  ])) {

    // Add custom validation on mini_node Student.
    $form['#validate'][] = 'rte_mis_student_validate_mini_node_student';

    // Get the values.
    $values = $form_state->getValues();
    if (array_key_exists('field_applied_category', $form) && array_key_exists('field_ability', $form)) {
      // Add the ajax callback for populating `field_ability` with options.
      $form['field_applied_category']['widget']['#ajax'] = [
        'callback' => 'rte_mis_student_test_callback',
        'wrapper' => 'applied_category_wrapper',
      ];
    }
    if (array_key_exists('field_ability', $form) && array_key_exists('field_document', $form)) {
      $applied_category_default_value = $form['field_applied_category']['widget']['#default_value'] ?? NULL;
      $applied_category_value = $values['field_applied_category'][0]['value'] ?? NULL;
      $field_ability_default_value = $form['field_ability']['widget']['#default_value'] ?? NULL;
      if (!empty($field_ability_default_value) && !isset($applied_category_value) && !empty($applied_category_default_value)) {
        $options = rte_mis_student_get_default_options($applied_category_default_value, 'field_ability');
        $form['field_ability']['widget']['#options'] = $options;
        $field_document_value = $form['field_document']['widget']['#default_value'] ?? NULL;
        $field_ability_value = $values['field_ability'][0]['value'] ?? NULL;
        if (!empty($field_document_value) && !isset($field_ability_value)) {
          $options = rte_mis_student_get_default_options(reset($field_ability_default_value), 'field_document');
          $form['field_document']['widget']['#options'] = $options;
        }
      }
      // Add the ajax callback for populating `field_document` with options.
      $form['field_ability']['widget']['#ajax'] = [
        'callback' => 'rte_mis_student_test_callback',
        'wrapper' => 'applied_category_wrapper',
      ];
      // Wrap the field_ability and field_document in fieldset.
      // Add state, this fieldset will be visible on `field_applied_category`
      // option selected.
      $form['field_applied_category_wrapper'] = [
        '#type' => 'fieldset',
        '#attributes' => [
          'id' => 'applied_category_wrapper',
        ],
        '#weight' => $form['field_ability']['#weight'],
        '#states' => [
          'visible' => [
            ':input[name="field_applied_category"]' => [
              ['value' => 'weaker_section'],
              'or',
              ['value' => 'disadvantage_section'],
            ],
          ],
        ],
      ];
      // Add required state on field widget.
      $form['field_ability']['widget']['#states'] = [
        'required' => [
          ':input[name="field_applied_category"]' => [
              ['value' => 'weaker_section'],
            'or',
              ['value' => 'disadvantage_section'],
          ],
        ],
      ];
      // Add visible state based on `field_ability` option selected.
      $form['field_document']['#states'] = [
        'visible' => [
          ':input[name="field_ability"]' => ['!value' => ''],
        ],
      ];
      // Add required state on field widget.
      $form['field_document']['widget']['#states'] = [
        'required' => [
          ':input[name="field_ability"]' => ['!value' => ''],
        ],
      ];
      // Add the field in wrapper fieldset.
      $form['field_applied_category_wrapper']['field_ability'] = $form['field_ability'];
      $form['field_applied_category_wrapper']['field_document'] = $form['field_document'];
      // Unset the field from the form.
      unset($form['field_ability']);
      unset($form['field_document']);
    }
    // Add honeypot configuration for spam protection.
    \Drupal::service('honeypot')->addFormProtection($form, $form_state, [
      'honeypot', 'time_restriction',
    ]);
    rte_mis_student_prefill_phone_value($form);
  }
}

/**
 * Pre-fill the value.
 *
 * Use this function for pre-filling parents details.
 */
function rte_mis_student_prefill_phone_value(&$form) {
  $phone_number = \Drupal::request()->cookies->get('student-phone', NULL);
  if (!empty($phone_number)) {
    // Use state to make this field readonly, as attributes does not work here.
    $form['field_mobile_number']['#states'] = [
      'readonly' => [
        ':input[name="field_mobile_number"]' => ['filled' => TRUE],
      ],
    ];
    $form['field_mobile_number']['widget'][0]['#default_value'] = [
      'value' => $phone_number,
      'country' => 'IN',
    ];
  }
}

/**
 * Ajax callback for populating field_ability and field_document options.
 *
 * This options will be populated based on the field_applied_category.
 */
function rte_mis_student_test_callback($form, FormStateInterface $form_state) {
  $applied_category_value = $form_state->getValue([
    'field_applied_category', 0, 'value',
  ]) ?? NULL;
  $config = \Drupal::config('rte_mis_student.settings')->get('field_default_options');
  if (isset($applied_category_value)) {
    $options = [
      '' => t('- Select -'),
    ];
    if (!empty($config[$applied_category_value])) {
      $options += array_intersect_key($config['field_ability'], array_flip($config[$applied_category_value])) ?? [];
    }
    $form['field_applied_category_wrapper']['field_ability']['widget']['#options'] = $options;
    $ability_value = $form_state->getValue(['field_ability', 0, 'value']) ?? NULL;
    if (isset($ability_value)) {
      $options = [
        '' => t('- Select -'),
      ];
      if (!empty($config[$ability_value])) {
        $options += array_intersect_key($config['field_document'], array_flip($config[$ability_value])) ?? [];
      }
      $form['field_applied_category_wrapper']['field_document']['widget']['#options'] = $options;
    }
  }
  return $form['field_applied_category_wrapper'];
}

/**
 * Custom validation on mini_node student add/edit form.
 */
function rte_mis_student_validate_mini_node_student($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  // Validate if user has selected `YES` on has sibling, but not has entered the
  // siblings details. Raise validation error.
  // Conditional_field is not working for paragraph_tables.
  if (isset($values['field_has_siblings'][0]['value']) && $values['field_has_siblings'][0]['value'] == 1) {
    $children = Element::children($values['field_siblings_details']) ?? [];
    $valid_children = array_filter($children, function ($key) {
      return is_numeric($key);
    });
    if (empty($valid_children)) {
      $form_state->setErrorByName('field_siblings_details', t('Please add sibling details.'));
    }
  }
  // Unset the value from field_ability and field_document options if
  // field_applied_category is set to N/A.
  if (isset($values['field_applied_category'][0]['value']) && $values['field_applied_category'][0]['value'] == '_none') {
    $user_input = $form_state->getUserInput();
    $user_input['field_ability'] = '';
    $user_input['field_document'] = '';
    $form_state->setUserInput($user_input);
  }
  // Validate the selected school preference.
  // Raise error is user is submitting the form without any school list.
  if (empty($values['items'])) {
    $form_state->setErrorByName('field_school_preference_wrapper', t('School Preference list cannot be empty. Please select at least one school.'));
  }
  // Raise error is user is submitting the form without selecting any school
  // from the available list.
  elseif (!empty($values['items'])) {
    $status_values = array_column($values['items'], 'status') ?? [];
    $selected_schools = array_filter($status_values, fn($item) => $item == 1);
    if (empty($selected_schools)) {
      $form_state->setErrorByName('field_school_preference_wrapper', t('Please select at least one school in school selection list.'));
    }
  }

}

/**
 * Implements hook_cron().
 */
function rte_mis_student_cron() {
  \Drupal::service('rte_mis_student.mobile_otp_service')->garbageCollection();
}

/**
 * Implements hook_field_group_form_process_build_alter().
 */
function rte_mis_student_field_group_form_process_build_alter(array &$element, FormStateInterface $form_state, &$complete_form) {
  if (isset($element['field_applied_category_wrapper']) && isset($element['group_location_information']) && $element['group_document_selection']['#group'] == 'group_tabs') {
    $element['field_applied_category_wrapper']['#group'] = 'group_document_selection';
  }
  if (isset($element['field_school_preference_wrapper']) && isset($element['field_school_preference_wrapper']) && $element['group_school_selection']['#group'] == 'group_tabs') {
    $element['field_school_preference_wrapper']['#group'] = 'group_school_selection';
    $element['#fieldgroups']['group_school_selection']->children[] = 'field_school_preference_wrapper';
    $element['#group_children']['field_school_preference_wrapper'] = 'group_school_selection';
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function rte_mis_student_entity_type_alter(&$entity_types) {
  $entity_types['mini_node']->setFormClass('default', OverrideMiniNodeForm::class);
  $entity_types['mini_node']->setFormClass('edit', OverrideMiniNodeForm::class);
}
