<?php

/**
 * @file
 * Contains rte_mis_allocation.module.
 */

use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Callback to get the list of allowed values.
 */
function rte_mis_allocation_get_allowed_values($definition, $entity = NULL) {
  $field_name = $definition->getName();
  // Loading the configurations of the school settings.
  $school_config = \Drupal::config('rte_mis_school.settings');
  // Get the class_type set in 'rte_mis_core.settings' configuration.
  $entry_class_type = \Drupal::config('rte_mis_core.settings')->get('entry_class.class_type') ?? NULL;
  $options = [];
  switch ($field_name) {
    case 'field_academic_year_allocation':
      $currentAcademicYear = _rte_mis_core_get_current_academic_year();
      $options[$currentAcademicYear] = str_replace('_', '-', $currentAcademicYear);
      return $options;

    case 'field_entry_class_for_allocation':
      $class_range = $school_config->get('field_default_options.field_default_entry_class') ?? [];
      $options += rte_mis_school_get_education_level_options($class_range['from'] ?? NULL, $class_range['to'] ?? NULL);
      $class_range = $school_config->get('field_default_options.field_optional_entry_class') ?? [];
      if ($entry_class_type === 'dual') {
        $options += rte_mis_school_get_education_level_options($class_range['from'] ?? NULL, $class_range['to'] ?? NULL);
      }
      return $options;

    case 'field_medium':
      return $school_config->get('field_default_options.field_medium') ?? [];
  }
}

/**
 * Implements hook_views_query_alter().
 */
function rte_mis_allocation_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'allotted_students_details') {
    $currentAcademicYear = _rte_mis_core_get_current_academic_year();
    // Get the current loggedIn user.
    $currentUser = \Drupal::currentUser();
    if (array_intersect(['school_admin'], $currentUser->getRoles())) {
      // Load the user entity.
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($currentUser->id() ?? NULL);
      // Check if the user is an instance of userInterface.
      if ($user instanceof UserInterface) {
        // Get the school id linked with the current loggedIn user.
        $schoolId = $user->get('field_school_details')->getString() ?? NULL;
        if ($schoolId) {
          // Query to filter based on school.
          $definition = [
            'table' => 'mini_node__field_school',
            'field' => 'entity_id',
            'left_table' => 'mini_node_field_data',
            'left_field' => 'id',
            'type' => 'LEFT',
          ];
          $join = \Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
          $query->addRelationship('mini_node__field_school', $join, 'mini_node_field_data');
          // Add a condition to filter by specific school ids.
          $query->addWhere('0', 'mini_node__field_school.field_school_target_id', $schoolId, '=');
          // Query to filter based on current academic year.
          $definition = [
            'table' => 'mini_node__field_academic_year_allocation',
            'field' => 'entity_id',
            'left_table' => 'mini_node_field_data',
            'left_field' => 'id',
            'type' => 'INNER',
          ];
          $join = \Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
          $query->addRelationship('mini_node__field_academic_year_allocation', $join, 'mini_node_field_data');
          // Add a condition to filter by specific school ids.
          $query->addWhere('0', 'mini_node__field_academic_year_allocation.field_academic_year_allocation_value', $currentAcademicYear, '=');
        }
      }
    }
    // Add a cache context for the user.
    $view->element['#cache']['contexts'][] = 'user';
  }
}
