<?php

/**
 * @file
 * Contains rte_mis_core.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatch;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\eck\EckEntityInterface;
use Drupal\rte_mis_core\Form\OverrideTermForm;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function rte_mis_core_theme() {
  return [
    'block--site-pre-menu-text-section-block' => [
      'template' => 'block--site-pre-menu-text-section-block',
      'variables' => [
        'values' => NULL,
      ],
    ],
  ];

}

/**
 * Callback function to return the current academic year.
 */
function _rte_mis_core_get_current_academic_year() {
  $current_year = date('Y');
  $next_year = date('y', strtotime('+1 year'));

  return $current_year . '_' . $next_year;
}

/**
 * Implements hook_entity_type_alter().
 */
function rte_mis_core_entity_type_alter(&$entity_types) {
  $entity_types['taxonomy_term']->setFormClass('default', OverrideTermForm::class);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function rte_mis_core_taxonomy_term_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($operation == 'delete' && $entity->bundle() == 'location_schema') {
    return rte_mis_core_restrict_location_schema_operation();
  }
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function rte_mis_core_taxonomy_term_create_access($account, $context, $entity_bundle) {
  if ($entity_bundle == 'location_schema') {
    return rte_mis_core_restrict_location_schema_operation();
  }
}

/**
 * Restrict actions on location_schema vocabulary,if location vocabulary exists.
 */
function rte_mis_core_restrict_location_schema_operation() {
  // Check if location term exist.
  $location_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'location',
  ]);
  // If it exists then do not allow user to delete location_schema terms.
  if (!empty($location_terms)) {
    return AccessResult::forbidden();
  }
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_core_form_alter(&$form, FormStateInterface $form_state, string $form_id) {
  // Add the consent message in login & Registration form.
  // @todo To replace the Text with link when pages are ready.
  if ($form_id === 'user_login_form') {
    // Get the route of forget password.
    $url = Url::fromRoute('user.pass');
    $link = Link::fromTextAndUrl(t('Forgot Password?'), $url);
    $link = $link->toRenderable();
    // Add class to link.
    $link['#attributes'] = ['class' => ['forgot-pswrd-cta']];

    $renderer = \Drupal::service('renderer');
    $link_markup = $renderer->renderPlain($link);

    $form['consent'] = [
      '#type' => 'markup',
      '#markup' => t('<p>By continuing, you are agree to our @tc & @pp.</p>', [
        '@tc' => 'Terms & Conditions',
        '@pp' => 'Privacy Policy',
      ]),
      '#weight' => array_key_exists('captcha', $form) ? $form['captcha']['#weight'] + 1 : $form['actions']['submit']['#weight'] - 1,
    ];

    // Add the forgot password to the user register form.
    $form['forgot_password'] = [
      '#type' => 'markup',
      '#markup' => $link_markup,
      '#weight' => array_key_exists('consent', $form) ? $form['consent']['#weight'] + 0.01 : $form['actions']['submit']['#weight'] - 1,
    ];
  }
  elseif ($form_id === 'user_register_form') {
    $form['consent'] = [
      '#type' => 'checkbox',
      '#title' => t("<p>Please confirm your agreement to our platform's @tc by checking this box, acknowledging the rules for using the Right to Education</p>", [
        '@tc' => 'term and conditions',
      ]),
      '#attributes' => [
        'id' => ['consent-action'],
      ],
      '#default_value' => FALSE,
      '#required' => TRUE,
      '#weight' => array_key_exists('captcha', $form) ? $form['captcha']['#weight'] + 1 : $form['actions']['submit']['#weight'] - 1,
    ];

    // Disable the form submit button if consent is not given.
    $form['actions']['submit']['#states'] = [
      'disabled' => [':input[name="consent"]' => ['checked' => FALSE]],
    ];

  }

  // Check if threshold value if present then hide it from user.
  $user = \Drupal::routeMatch()->getParameter('user');
  $user_id = '';
  if ($user instanceof UserInterface) {
    $user_id = $user->id();
  }

  if (array_key_exists("user_$user_id", $form)) {
    $form["user_$user_id"]['#access'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function rte_mis_core_preprocess_menu(&$variables) {
  $is_admin = \Drupal::currentUser()->hasPermission('access administration pages');
  // Hide the helper menu for non admin users.
  if (!$is_admin && ($variables['menu_name'] === 'admin' && array_key_exists('admin_toolbar_tools.help', $variables['items']))) {
    unset($variables['items']['admin_toolbar_tools.help']);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function rte_mis_core_preprocess_block(&$variables) {
  // Change the page title block content.
  if ($variables['plugin_id'] === 'page_title_block') {
    // Check and update the add term title to the respective relevant page
    // title.
    $current_route_match = \Drupal::routeMatch()->getCurrentRouteMatch();
    if ($current_route_match instanceof RouteMatch) {
      // Check if it's a term page route then change the title according to the
      // vocab.
      $route_name = $current_route_match->getRouteName();
      switch ($route_name) {
        case 'entity.taxonomy_term.add_form':
          // Load the parameters to get the vocab name.
          $vocab = $current_route_match->getRawParameter('taxonomy_vocabulary');
          if ($vocab === 'school') {
            $variables['content']['#title'] = t('Add School');
          }
          elseif ($vocab === 'location') {
            $variables['content']['#title'] = t('Add Location');
          }
          break;

        case 'entity.taxonomy_term.edit_form':
          // Load the parameters to get the vocab name.
          $vocab = $current_route_match->getParameter('taxonomy_term')->bundle();
          if ($vocab === 'school') {
            $variables['content']['#title'] = t('Edit School');
          }
          elseif ($vocab === 'location') {
            $variables['content']['#title'] = t('Edit Location');
          }
          break;

        case 'entity.user.canonical':
          $current_user = \Drupal::currentUser();
          if ($current_user->hasRole('school') || $current_user->hasRole('school_admin')) {
            $user = \Drupal::entityTypeManager()->getStorage('user')->load($current_user->id());
            // Load the current user info and get the school name.
            if ($user instanceof UserInterface) {
              $target_id = $user->get('field_school_details')->getString();
              if (!empty($target_id)) {
                $school_details = \Drupal::entityTypeManager()->getStorage('mini_node')->load($target_id);

                if ($school_details instanceof EckEntityInterface) {
                  $school_name = $school_details->get('field_school_name')->getString();
                  $variables['content']['#title'] = !empty($school_name) ? $school_name : $variables['content']['#title'];
                }
              }
            }
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_field_widget_complete_form_alter().
 */
function rte_mis_core_field_widget_complete_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $field_type = $field_definition->getType();
  if ($field_type == 'integer') {
    // Add class to integer input.
    $field_widget_complete_form['widget'][0]['value']['#attributes']['class'][] = 'number-validate';
    $field_widget_complete_form['widget'][0]['value']['#attributes']['class'][] = 'paste-validate';
    // Attach library to validate the number input.
    $field_widget_complete_form['widget']['#attached']['library'][] = 'rte_mis_core/restrict_number_input';
  }
  elseif ($field_type == 'decimal') {
    // Add class to float input.
    $field_widget_complete_form['widget'][0]['value']['#attributes']['class'][] = 'decimal-validate';
    $field_widget_complete_form['widget'][0]['value']['#attributes']['class'][] = 'paste-validate';
    // Attach library to validate the float input.
    $field_widget_complete_form['widget']['#attached']['library'][] = 'rte_mis_core/restrict_number_input';
  }
}

/**
 * Implements hook_field_widget_complete_WIDGET_TYPE_form_alter().
 */
function rte_mis_core_field_widget_complete_daterange_default_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context) {
  // Restrict the user from entering old date for timeline academic session.
  if ($context['items']->getEntity()->bundle() == 'timeline') {
    $today = (new \DateTime())->format('Y-m-d');
    $field_widget_complete_form['widget'][0]['value']['#attributes']['min'] = $today;
    $field_widget_complete_form['widget'][0]['end_value']['#attributes']['min'] = $today;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function rte_mis_core_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  $roles = \Drupal::currentUser()->getRoles();
  // Remove the bulk import/export local tabs for state admin.
  if (in_array('state_admin', $roles)) {
    if (isset($data['tabs'][0]['config_translation.local_tasks:entity.taxonomy_vocabulary.config_translation_overview'])) {
      unset($data['tabs'][0]['config_translation.local_tasks:entity.taxonomy_vocabulary.config_translation_overview']);
    }
    if (isset($data["tabs"][0]['locale.translate_import'])) {
      unset($data["tabs"][0]['locale.translate_import']);
    }
    if (isset($data["tabs"][0]['locale.translate_export'])) {
      unset($data["tabs"][0]['locale.translate_export']);
    }
    if (isset($data["tabs"][0]['locale.settings'])) {
      unset($data["tabs"][0]['locale.settings']);
    }
    $cacheability->addCacheContexts(['user.roles']);
  }

  // Unset local task from user routes.
  if (in_array($route_name, ['user.login', 'user.register', 'user.pass'])) {
    if (isset($data['tabs'][0]['user.register'])) {
      unset($data['tabs'][0]['user.register']);
    }
    if (isset($data['tabs'][0]['user.pass'])) {
      unset($data['tabs'][0]['user.pass']);
    }
    if (isset($data['tabs'][0]['user.login'])) {
      unset($data['tabs'][0]['user.login']);
    }
    $cacheability->addCacheContexts(['url.path']);
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function rte_mis_core_menu_local_actions_alter(&$local_actions) {
  if (isset($local_actions['entity.taxonomy_term.add_form'])) {
    // Alter the class of taxonomy add term.
    $local_actions['entity.taxonomy_term.add_form']['class'] = '\Drupal\rte_mis_core\Plugin\Menu\AlterTaxonomyActionTask';
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function rte_mis_core_mini_node_presave(EntityInterface $entity) {
  if (in_array($entity->bundle(), ['academic_session']) && $entity->get('langcode')->value != 'en') {
    $entity->set('langcode', 'en');
  }
}
