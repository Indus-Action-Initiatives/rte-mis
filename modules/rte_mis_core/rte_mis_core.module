<?php

/**
 * @file
 * Contains rte_mis_core.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\rte_mis_core\Form\OverrideTermForm;
use Drupal\user\UserInterface;

/**
 * Implements hook_entity_type_alter().
 */
function rte_mis_core_entity_type_alter(&$entity_types) {
  $entity_types['taxonomy_term']->setFormClass('default', OverrideTermForm::class);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function rte_mis_core_taxonomy_term_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($operation == 'delete' && $entity->bundle() == 'location_schema') {
    return rte_mis_core_restrict_location_schema_operation();
  }
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function rte_mis_core_taxonomy_term_create_access($account, $context, $entity_bundle) {
  if ($entity_bundle == 'location_schema') {
    return rte_mis_core_restrict_location_schema_operation();
  }
}

/**
 * Restrict actions on location_schema vocabulary,if location vocabulary exists.
 */
function rte_mis_core_restrict_location_schema_operation() {
  // Check if location term exist.
  $location_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'location',
  ]);
  // If it exists then do not allow user to delete location_schema terms.
  if (!empty($location_terms)) {
    return AccessResult::forbidden();
  }
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_core_form_alter(&$form, FormStateInterface $form_state, string $form_id) {
  // Add the consent message in login & Registration form.
  // @todo To replace the Text with link when pages are ready.
  if ($form_id === 'user_login_form') {
    $form['consent'] = [
      '#type' => 'markup',
      '#markup' => t('<p>By continuing, you are agree to our @tc & @pp.</p>', [
        '@tc' => 'Terms & Conditions',
        '@pp' => 'Privacy Policy',
      ]),
      '#weight' => array_key_exists('captcha', $form) ? $form['captcha']['#weight'] + 1 : $form['actions']['submit']['#weight'] - 1,
    ];
  }
  elseif ($form_id === 'user_register_form') {
    $form['consent'] = [
      '#type' => 'checkbox',
      '#title' => t('<p>By continuing, you are agree to our @tc & @pp.</p>', [
        '@tc' => 'Terms & Conditions',
        '@pp' => 'Privacy Policy',
      ]),
      '#attributes' => [
        'id' => ['consent-action'],
      ],
      '#default_value' => FALSE,
      '#required' => TRUE,
      '#weight' => array_key_exists('captcha', $form) ? $form['captcha']['#weight'] + 1 : $form['actions']['submit']['#weight'] - 1,
    ];

    // Disable the form submit button if consent is not given.
    $form['actions']['submit']['#states'] = [
      'disabled' => [':input[name="consent"]' => ['checked' => FALSE]],
    ];

  }

  // Check if threshold value if present then hide it from user.
  $user = \Drupal::routeMatch()->getParameter('user');
  $user_id = '';
  if ($user instanceof UserInterface) {
    $user_id = $user->id();
  }

  if (array_key_exists("user_$user_id", $form)) {
    $form["user_$user_id"]['#access'] = FALSE;
  }
}
