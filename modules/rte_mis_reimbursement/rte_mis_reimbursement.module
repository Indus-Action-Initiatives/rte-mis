<?php

/**
 * @file
 * Contains rte_mis_reimbursement.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\eck\EckEntityInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\workflow\Entity\WorkflowTransition;
use Drupal\workflow\Entity\WorkflowTransitionInterface;

/**
 * Function to list the headers.
 */
function rte_mis_reimbursement_get_allowed_values($definition, $entity = NULL) {
  \Drupal::moduleHandler()->loadInclude('rte_mis_core', 'inc', 'rte_mis_core');
  $options = rte_mis_core_get_allowed_values($definition, $entity);
  return $options;
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_reimbursement_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (in_array($form_id, ['mini_node_school_fee_details_form',
    'mini_node_school_fee_details_edit_form',
  ])) {
    // Removed the suffix text.
    unset($form['field_state_fees']['widget']['add_more']['#suffix']);
    // Loop through each delta and remove the suffix text dynamically.
    foreach ($form['field_state_fees']['widget'] as $delta => $item) {
      if (is_numeric($delta)) {
        unset($form['field_state_fees']['widget'][$delta]['subform']['field_reimbursement_fees_type']['widget']['add_more']['#suffix']);
      }
    }
    $form['#validate'][] = 'rte_mis_reimbursement_validate';
  }
  elseif (in_array($form_id, ['user_register_form', 'user_form'])) {
    // Get the current user.
    $current_user = \Drupal::currentUser();
    // Get the current user's roles.
    $current_user_roles = $current_user->getRoles();
    if ($form_id == 'user_register_form') {
      // Hide the field.
      unset($form['field_bank_details']);
    }
    else {
      $user = \Drupal::routeMatch()->getParameter('user');
      $current_edit_user_id = NULL;
      if ($user instanceof UserInterface) {
        $current_edit_user_id = $user->id();
      }
      // Check if the current user is not updating own profile,
      // State Admin, District Admin won't alter the bank details.
      if (isset($current_edit_user_id) && $current_edit_user_id != $current_user->id()) {
        // For different user admin, disable the bank details section.
        $form['field_bank_details']['#disabled'] = 'disabled';
      }
      else {
        // If the user role is `app_admin`, and user is editing own profile
        // then hide the bank details.
        if (array_intersect(['app_admin'], $current_user_roles)) {
          unset($form['field_bank_details']);
        }
      }
    }
  }
  elseif (in_array($form_id, ['mini_node_school_claim_form',
    'mini_node_school_claim_edit_form',
  ])) {
    // Get the current user role.
    $current_user_roles = \Drupal::currentUser()->getRoles(TRUE);
    if (in_array('school_admin', $current_user_roles)) {
      $form['field_reimbursement_claim_status']['#access'] = FALSE;
      $form['field_transaction_status']['#access'] = FALSE;
      $form['field_school']['#access'] = FALSE;
    }

    $form['field_academic_session_tracking']['widget']['#ajax'] = [
      'callback' => 'rte_mis_reimbursement_school_claim_wrapper_callback',
      'wrapper' => 'school-claim-wrapper',
      'progress' => [
        'type' => 'fullscreen',
      ],
    ];

    $form['field_payment_head']['widget']['#ajax'] = [
      'callback' => 'rte_mis_reimbursement_school_claim_wrapper_callback',
      'wrapper' => 'school-claim-wrapper',
      'progress' => [
        'type' => 'fullscreen',
      ],
    ];

    $form['field_additional_fees']['widget']['#ajax'] = [
      'callback' => 'rte_mis_reimbursement_school_claim_wrapper_callback',
      'wrapper' => 'school-claim-wrapper',
      'progress' => [
        'type' => 'fullscreen',
      ],
    ];
    $additional_fees = [];
    if ($form_state->hasValue('field_additional_fees')) {
      $additional_fees = $form_state->getValue('field_additional_fees') ?? NULL;
    }
    $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
    $header = $reimbursement_helper->tableHeading($additional_fees);
    $form['school_claim_table'] = [
      '#type' => 'table',
      '#header' => $header,
      '#empty' => t('No Student to displays'),
      '#prefix' => '<div id="school-claim-wrapper">',
      '#suffix' => '</div>',
      '#weight' => array_key_exists('field_payment_head', $form) ? $form['field_payment_head']['#weight'] + 1 : $form['actions']['submit']['#weight'] - 1,
    ];

    if (in_array($form_id, ['mini_node_school_claim_edit_form'])) {
      rte_mis_reimbursement_school_claim_wrapper_callback($form, $form_state);
    }
  }
}

/**
 * Ajax callback function.
 */
function rte_mis_reimbursement_school_claim_wrapper_callback(&$form, $form_state) {
  // Get the object if the entity.
  $form_state_entity = $form_state->getformObject()->getEntity();
  // Set the values.
  $academic_session = !$form_state_entity->get('field_academic_session_tracking')->isEmpty() ? $form_state_entity->get('field_academic_session_tracking')->getString() : $form_state->getValue('field_academic_session_tracking')[0]['value'] ?? NULL;
  $approval_authority = !$form_state_entity->get('field_payment_head')->isEmpty() ? $form_state_entity->get('field_payment_head')->getString() : $form_state->getValue('field_payment_head')[0]['value'] ?? NULL;
  $additional_fees = !$form_state_entity->get('field_additional_fees')->isEmpty() ? $form_state_entity->get('field_additional_fees')->getValue() : $form_state->getValue('field_additional_fees') ?? [];
  $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
  $header = $reimbursement_helper->tableHeading($additional_fees);
  $data = $reimbursement_helper->loadStudentData($academic_session, $approval_authority, $additional_fees);

  $form['school_claim_table'] = [
    '#type' => 'table',
    '#header' => $header,
    '#rows' => $data,
    '#empty' => t('No Student to displays'),
    '#attributes' => ['id' => 'school-claim-table'],
    '#prefix' => '<div id="school-claim-wrapper">',
    '#suffix' => '</div>',
    '#weight' => array_key_exists('field_payment_head', $form) ? $form['field_payment_head']['#weight'] + 1 : $form['actions']['submit']['#weight'] - 1,
  ];

  // Return the updated table within the AJAX callback.
  return $form['school_claim_table'];
}

/**
 * Callback to get the list of allowed values.
 */
function rte_mis_reimbursement_school_claim_heading(array $additional_fees = []) {
  $header = [
    'serial_number' => t('SNO'),
    'student_name' => t('Student Name'),
    'mobile_number' => t('Gaurdian Name'),
    'application_number' => t('Pre-session Class'),
    'parent_name' => t('Medium'),
    'school_fees' => t('School Tution Fees'),
  ];
  // Check if there are additional fees values.
  if (!empty($additional_fees)) {
    // Loop through the additional fees and append to the header dynamically.
    foreach ($additional_fees as $fee) {
      $value = $fee['value'] ?? NULL;
      if ($value) {
        $header[$value] = t('@value Fees', ['@value' => ucfirst($fee['value'])]);
      }
    }
  }
  $header['goverment_fees'] = t('Govt Fees');
  $header['Total'] = t('Total');
  return $header;
}

/**
 * Custom validation handler to ensure unique selections.
 */
function rte_mis_reimbursement_validate($form, &$form_state) {
  // Initialize arrays to track unique selections.
  $selected_board_types = [];

  $fee_details_active = $form_state->getValue('status');
  if (!empty($fee_details_active) && $fee_details_active['value']) {
    // Check if there are any existing active school fee details for the same
    // academic year & same payment head.
    // Get the current mini_node id.
    $fee_details_id = 0;
    $fee_details = \Drupal::routeMatch()->getParameter('mini_node');
    if (!empty($fee_details)) {
      $fee_details_id = $fee_details->id();
    }
    $academic_session_academic_year = $form_state->getValue('field_academic_year')[0]['value'] ?? NULL;
    $field_payment_head = $form_state->getValue('field_payment_head')[0]['value'] ?? NULL;
    $academic_session_query = \Drupal::entityTypeManager()->getStorage('mini_node')->getQuery();
    $academic_session_query->accessCheck(TRUE)
      ->condition('type', 'school_fee_details')
      ->condition('field_academic_year', $academic_session_academic_year)
      ->condition('field_payment_head', $field_payment_head)
      ->condition('status', 1)
      ->condition('id', $fee_details_id, '!=');
    $nids = $academic_session_query->execute();

    if (count($nids) > 0) {
      $field_payment_head = str_replace('_', ' ', $field_payment_head);
      $form_state->setErrorByName('field_academic_year', t('Two school fee details with same Payment Head: @payments_head
      in a same academic year cannot be in active state.', ['@payments_head' => ucfirst($field_payment_head)]));
      $form_state->setErrorByName('field_payment_head', ' ');
    }

    if (!empty($form_state->getValue('field_state_fees'))) {
      // Loop through each delta (each field_state_fees instance).
      foreach ($form_state->getValue('field_state_fees') as $outer_delta => $state_fee_value) {
        if (is_numeric($outer_delta)) {
          // Get the selected value for field_board_type.
          $selected_board_type = $state_fee_value['subform']['field_board_type'];

          // Check if the board type was already selected.
          if (in_array($selected_board_type, $selected_board_types)) {
            // Set an error directly on the form element
            // for duplicate board type.
            $form_state->setErrorByName(
              "field_state_fees][$outer_delta][subform][field_board_type",
              t('The selected board type must be unique for each entry.')
            );
          }
          else {
            // Add the selected board type to the array for uniqueness tracking.
            $selected_board_types[] = $selected_board_type;
          }

          // Now, validate the inner field_reimbursement_fees_type
          // for unique fees types.
          if (!empty($state_fee_value['subform']['field_reimbursement_fees_type'])) {
            $selected_fees_types = [];

            // Loop through each delta for field_reimbursement_fees_type.
            foreach ($state_fee_value['subform']['field_reimbursement_fees_type'] as $inner_delta => $reimbursement_fee_value) {
              if (is_numeric($inner_delta)) {
                // Get the selected value for field_fees_type.
                $selected_fees_type = $reimbursement_fee_value['subform']['field_fees_type'];

                // Check if the fees type has already been selected
                // within the same reimbursement.
                if (in_array($selected_fees_type, $selected_fees_types)) {
                  // Set an error on the specific form element
                  // for duplicate fees type.
                  $form_state->setErrorByName(
                    "field_state_fees][$outer_delta][subform][field_reimbursement_fees_type][$inner_delta][subform][field_fees_type",
                    t('The selected fees type must be unique within each reimbursement.')
                  );
                }
                else {
                  // Add the selected fees type to the array
                  // to track uniqueness.
                  $selected_fees_types[] = $selected_fees_type;
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function rte_mis_reimbursement_mini_node_presave(EntityInterface $entity) {
  // Check if the entity is of the desired bundle and has the required field.
  if ($entity instanceof EckEntityInterface && $entity->bundle() == 'school_claim') {
    if ($entity->hasField('field_admitted_student')) {
      // Get the academic year and approval authority from the entity.
      $academic_year = $entity->get('field_academic_session_tracking')->getString() ?? NULL;
      $approval_authority = $entity->get('field_payment_head')->getString() ?? NULL;

      // Define the class list and user linked school. Adjust as needed.
      $class_list_selected = [];
      if ($approval_authority == 'central_head') {
        $school_config = \Drupal::config('rte_mis_school.settings');
        // Consider till class 8th.
        $class_levels = $school_config->get('field_default_options.class_level') ?? [];

        foreach ($class_levels as $key => $class_level) {
          // Consider only students from class 1st to 8th for the central.
          if ($key >= 3) {
            $class_list_selected[] = $key;
            // Search the key for the value till class 8th.
            if ($class_level == '8th') {
              break;
            }
          }
        }
      }
      elseif ($approval_authority == 'state_head') {
        // Check in config, if state payment head is allowed.
        $reimbursement_config = \Drupal::config('rte_mis_reimbursement.settings');
        $state_fee_status = $reimbursement_config->get('payment_heads.enable_state_head');
        if ($state_fee_status) {
          // Consider till class 8th.
          $class_levels = $reimbursement_config->get('payment_heads.state_class_list') ?? [];
          $class_list_selected = $class_levels;
        }
        else {
          $class_list_selected = [];
        }
      }
      $current_user = \Drupal::currentUser();
      $current_user_entity = \Drupal::entityTypeManager()->getStorage('user')->load($current_user->id());
      // For the first time, School admin needs to submit claim.
      $user_linked_school = !empty($entity->get('field_school')->getString()) ? $entity->get('field_school')->getString() : $current_user_entity->get('field_school_details')->getString() ?? NULL;

      // Proceed only if we have an academic year.
      if (isset($academic_year)) {
        // Execute the query to get the list of student performance mini nodes.
        $query = \Drupal::entityQuery('mini_node')
          ->condition('type', 'student_performance')
          ->condition('field_current_class', $class_list_selected, 'IN')
          ->condition('field_school', $user_linked_school)
          ->condition('field_academic_session_tracking', $academic_year)
          ->accessCheck(FALSE);

        // Execute the query and get the list of entity IDs.
        $student_performance_ids = $query->execute();

        // If there are any IDs returned,
        // set them in the 'field_admitted_student' field.
        if (!empty($student_performance_ids)) {
          // Set the field value with the returned entity IDs.
          $entity->set('field_admitted_student', array_values($student_performance_ids));
          $entity->set('field_school', $user_linked_school);
        }
        else {
          // If no results are found, clear the field or handle it as needed.
          $entity->set('field_admitted_student', []);
          $entity->set('field_school', NULL);
        }
      }
    }

    // Override the workflow transition if single approval is involved.
    if ($entity->hasField('field_reimbursement_claim_status')) {
      $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
      $is_single_level_approval = $reimbursement_helper->isSingleLevelApprovalEnabled();
      $roles = \Drupal::currentUser()->getRoles();
      // If single level approval is enabled only 'district_admin' will be
      // allowed to udpate the reimbursement status.
      if ($is_single_level_approval && in_array('district_admin', $roles)) {
        $transition = $entity->get('field_reimbursement_claim_status')->__get('workflow_transition') ?? NULL;
        if ($transition instanceof WorkflowTransitionInterface) {
          $reimbursement_helper->processSingleLevelApproval($transition);
        }
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function rte_mis_reimbursement_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'reimbursement_claim') {
    $view->addCacheContext('user');
    $roles = \Drupal::currentUser()->getRoles() ?? [];
    // Only applicable for district and block admins.
    if (array_intersect($roles, ['district_admin', 'block_admin'])) {
      $user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
      if ($user instanceof UserInterface) {
        $id = [0];
        // Get the location details from user entity.
        $selected_location = $user->get('field_location_details')->entity ?? NULL;
        if ($selected_location instanceof TermInterface) {
          $location_tree = [];
          // Get the id of term assuming the user is district admin.
          $district_id = $id[] = $selected_location->id();
          // Load the tree if location based in district/block.
          if (!empty($district_id)) {
            $location_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('location', $district_id) ?? [];
          }
          if (!empty($location_tree)) {
            foreach ($location_tree as $value) {
              $id[] = $value->tid;
            }
          }
        }
        // Create left join for `field_location`.
        $definition = [
          'table' => 'mini_node__field_location',
          'field' => 'entity_id',
          'left_table' => 'mini_node_field_data_mini_node__field_school',
          'left_field' => 'id',
          'type' => 'LEFT',
        ];
        $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
        $query->addRelationship('mini_node__field_location', $join, 'mini_node_field_data');
        // Add condition to match for the school location with the
        // district/block admin location.
        $query->addWhere(0, 'mini_node__field_location.field_location_target_id', $id, 'IN');
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function rte_mis_reimbursement_form_workflow_transition_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $workflow_transition = $form['workflow_transition']['#value'] ?? NULL;
  if ($workflow_transition instanceof WorkflowTransition) {
    $type = $workflow_transition->wid->getString() ?? '';
    if ($type == 'reimbursement_claim_workflow') {
      // Alter the title for submit button.
      $form['actions']['submit']['#value'] = t('Submit');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function rte_mis_reimbursement_mini_node_view(array &$build, EckEntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'school_claim' && $view_mode == 'full') {
    // Get academic year, $approval authority and additional fees value.
    $academic_year = $entity->get('field_academic_session_tracking')->value ?? NULL;
    $approval_authority = $entity->get('field_payment_head')->value ?? NULL;
    $additional_fees = $entity->get('field_additional_fees')->getValue() ?? NULL;
    if ($entity->hasField('field_reimbursement_claim_status')) {
      // Add cache tags for reimbursement configuration.
      $reimbursement_config = \Drupal::config('rte_mis_reimbursement.settings');
      $build['#cache']['tags'] = Cache::mergeTags($build['#cache']['tags'] ?? [], $reimbursement_config->getCacheTags());

      $workflow_form = $display->getComponent('field_reimbursement_claim_status') ?? [];
      // Creating a render array to render reimbursement claim status
      // workflow history.
      $build['field_reimbursement_claim_status_history'] = $entity->get('field_reimbursement_claim_status')->view([
        'type' => 'workflow_state_history',
      ]);
      $build['field_reimbursement_claim_status_history']['#title'] = t('Reimbursement Verification History');
      // Place workflow history field before the workflow form field.
      $build['field_reimbursement_claim_status_history']['#weight'] = isset($workflow_form['weight']) ? $workflow_form['weight'] - 1 : 99;

      $roles = \Drupal::currentUser()->getRoles();
      if (array_intersect($roles, ['block_admin', 'district_admin', 'app_admin'])) {
        if (\Drupal::service('rte_mis_core.core_helper')->isAcademicSessionValid('reimbursement_claim')) {
          $field_widget_type = 'workflow_default';
        }
        else {
          $field_widget_type = 'list_default';
        }
        $build['field_reimbursement_claim_status'] = $entity->get('field_reimbursement_claim_status')->view([
          'type' => $field_widget_type,
        ]);
      }
    }

    // Row data.
    $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
    $header = $reimbursement_helper->tableHeading($additional_fees);
    $data = $reimbursement_helper->loadStudentData($academic_year, $approval_authority, $additional_fees);

    $build['school_claim_table'] = [
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $data,
      '#empty' => t('No data available.'),
      '#attributes' => ['class' => ['custom-table-class']],
      '#weight' => 100,
    ];

    // Add a custom class for the mininode container needed for styling
    // of entity fields on mini node view page.
    $build['#attributes']['class'][] = 'school-claim-mini-node';
  }
}

/**
 * Implements hook_workflow_permitted_state_transitions_alter().
 */
function rte_mis_reimbursement_workflow_permitted_state_transitions_alter(array &$transitions, array $context) {
  $is_single_level_approval = \Drupal::service('rte_mis_reimbursement.reimbursement_helper')->isSingleLevelApprovalEnabled();
  // Restrict the possible transitions if single level approval is enabled.
  if ($context['field_name'] == 'field_reimbursement_claim_status' && $is_single_level_approval) {
    // If single level approval is enabled we disable workflow state
    // transitions for block admin.
    if (in_array('block_admin', $context['user']->getRoles())) {
      unset($transitions['reimbursement_claim_workflow_submitted_approved_by_beo']);
      unset($transitions['reimbursement_claim_workflow_submitted_rejected']);
    }
    // If single level approval is enabled we make sure that only district
    // admin will be able to update the state.
    elseif (in_array('district_admin', $context['user']->getRoles())) {
      // This array contain key as from states and values is possible
      // transitions.
      $possible_transition = [
        // From submitted state.
        'reimbursement_claim_workflow_submitted' => [
          'reimbursement_claim_workflow_submitted_approved_by_beo',
          'reimbursement_claim_workflow_submitted_rejected',
        ],
        // From BEO approved state.
        'reimbursement_claim_workflow_approved_by_beo' => [
          'reimbursement_claim_workflow_approved_by_beo_approved_by_deo',
          'reimbursement_claim_workflow_approved_by_beo_rejected',
          'reimbursement_claim_workflow_approved_by_beo_submitted',
        ],
      ];
      $current_state = $context['state'];
      $allowed_transition = $current_state->getTransitions($context['entity'], '', $context['user'], TRUE) ?? [];
      // Set allowed transitions.
      if (isset($possible_transition[$current_state->id()])) {
        foreach ($possible_transition[$current_state->id()] as $value) {
          if (isset($allowed_transition[$value])) {
            $transitions[$value] = $allowed_transition[$value];
          }
        }
      }
    }
  }

}
