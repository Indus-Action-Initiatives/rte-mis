<?php

/**
 * @file
 * Contains rte_mis_reimbursement.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_form_alter().
 */
function rte_mis_reimbursement_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (in_array($form_id, ['mini_node_state_fees_details_form',
    'mini_node_state_fees_details_edit_form',
  ])) {
    // Removed the suffix text.
    unset($form['field_state_fees']['widget']['add_more']['#suffix']);
    // Loop through each delta and remove the suffix text dynamically.
    foreach ($form['field_state_fees']['widget'] as $delta => $item) {
      if (is_numeric($delta)) {
        unset($form['field_state_fees']['widget'][$delta]['subform']['field_reimbursement_fees_type']['widget']['add_more']['#suffix']);
      }
    }
    $form['#validate'][] = 'rte_mis_reimbursement_validate';
  }
  elseif (in_array($form_id, ['user_register_form', 'user_form'])) {
    // Get the current user.
    $current_user = \Drupal::currentUser();
    // Get the current user's roles.
    $current_user_roles = $current_user->getRoles();
    if ($form_id == 'user_register_form') {
      // Hide the field.
      unset($form['field_bank_details']);
    }
    else {
      $user = \Drupal::routeMatch()->getParameter('user');
      $current_edit_user_id = NULL;
      if ($user instanceof UserInterface) {
        $current_edit_user_id = $user->id();
      }
      // Check if the current user is not updating own profile,
      // State Admin, District Admin won't alter the bank details.
      if (isset($current_edit_user_id) && $current_edit_user_id != $current_user->id()) {
        // For different user admin, disable the bank details section.
        $form['field_bank_details']['#disabled'] = 'disabled';
      }
      else {
        // If the user role is `app_admin`, and user is editing own profile
        // then hide the bank details.
        if (array_intersect(['app_admin'], $current_user_roles)) {
          unset($form['field_bank_details']);
        }
      }
    }
  }
}

/**
 * Custom validation handler to ensure unique selections.
 */
function rte_mis_reimbursement_validate($form, &$form_state) {
  // Initialize arrays to track unique selections.
  $selected_board_types = [];

  // Loop through each delta (each field_state_fees instance).
  foreach ($form_state->getValue('field_state_fees') as $outer_delta => $state_fee_value) {
    if (is_numeric($outer_delta)) {
      // Get the selected value for field_board_type.
      $selected_board_type = $state_fee_value['subform']['field_board_type'];

      // Check if the board type was already selected.
      if (in_array($selected_board_type, $selected_board_types)) {
        // Set an error directly on the form element for duplicate board type.
        $form_state->setErrorByName(
          "field_state_fees][$outer_delta][subform][field_board_type",
          t('The selected board type must be unique for each entry.')
        );
      }
      else {
        // Add the selected board type to the array for uniqueness tracking.
        $selected_board_types[] = $selected_board_type;
      }

      // Now, validate the inner field_reimbursement_fees_type for unique fees
      // types.
      if (!empty($state_fee_value['subform']['field_reimbursement_fees_type'])) {
        $selected_fees_types = [];

        // Loop through each delta for field_reimbursement_fees_type.
        foreach ($state_fee_value['subform']['field_reimbursement_fees_type'] as $inner_delta => $reimbursement_fee_value) {
          if (is_numeric($inner_delta)) {
            // Get the selected value for field_fees_type.
            $selected_fees_type = $reimbursement_fee_value['subform']['field_fees_type'];

            // Check if the fees type has already been selected within the same
            // reimbursement.
            if (in_array($selected_fees_type, $selected_fees_types)) {
              // Set an error on the specific form element for duplicate fees
              // type.
              $form_state->setErrorByName(
                "field_state_fees][$outer_delta][subform][field_reimbursement_fees_type][$inner_delta][subform][field_fees_type",
                t('The selected fees type must be unique within each reimbursement.')
              );
            }
            else {
              // Add the selected fees type to the array to track uniqueness.
              $selected_fees_types[] = $selected_fees_type;
            }
          }
        }
      }
    }
  }

}

/**
 * Callback to get the list of allowed values.
 */
function rte_mis_reimbursement_get_allowed_values($definition, $entity = NULL) {
  \Drupal::moduleHandler()->loadInclude('rte_mis_core', 'inc', 'rte_mis_core');
  $options = rte_mis_core_get_allowed_values($definition, $entity);
  return $options;
}
