<?php

/**
 * @file
 * Contains rte_mis_reimbursement.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\eck\EckEntityInterface;
use Drupal\sms\Direction;
use Drupal\sms\Message\SmsMessage;
use Drupal\taxonomy\TermInterface;
use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Render\ViewsRenderPipelineMarkup;
use Drupal\views\ViewExecutable;
use Drupal\workflow\Entity\WorkflowTransition;
use Drupal\workflow\Entity\WorkflowTransitionInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_theme().
 */
function rte_mis_reimbursement_theme() {
  return [
    'eck_entity__mini_node__school_claim__pdf' => [
      'template' => 'eck-entity--mini-node--school-claim--pdf',
      'base hook' => 'eck_entity',
    ],
  ];

}

/**
 * Implements hook_preprocess_HOOK().
 */
function rte_mis_reimbursement_preprocess_eck_entity(&$variables) {
  if ($variables['view_mode'] == 'pdf' && $variables['bundle'] == 'school_claim') {
    $lang_id = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $language_config = \Drupal::configFactory()->get('rte_mis_multilingual.settings')->get('font_settings');
    if (isset($language_config[$lang_id])) {
      $variables['#attached']['html_head'][] = [
        [
          '#tag' => 'link',
          '#attributes' => [
            'href' => 'https://fonts.googleapis.com',
            'rel' => 'preconnect',
          ],
        ],
        'google_fonts_preconnect',
      ];

      $variables['#attached']['html_head'][] = [
        [
          '#tag' => 'link',
          '#attributes' => [
            'href' => 'https://fonts.gstatic.com',
            'rel' => 'preconnect',
            'crossorigin' => TRUE,
          ],
        ],
        'google_fonts_preconnect_crossorigin',
      ];
      $variables['#attached']['html_head'][] = [
        [
          '#tag' => 'link',
          '#attributes' => [
            'href' => $language_config[$lang_id]['url'],
            'rel' => 'stylesheet',
          ],
        ],
        'google_fonts',
      ];
      $font = $language_config[$lang_id]['font'] ?? '';
      // Add inline styles for font-family.
      $variables['font_styles'] = "body { font-family: $font;}";
    }
    $variables['school_name'] = $variables['content']['field_school'][0]['#mini_node']->get('field_school_name')->getString();
    $location_id = $variables['content']['field_school'][0]['#mini_node']->get('field_location')->getString();
    $locations = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($location_id);

    // Pass the district and block name.
    $variables['district_name'] = array_reverse($locations)[0]->getName();
    $variables['block_name'] = array_reverse($locations)[1]->getName();
    $variables['total_fee'] = $variables['content']['field_total_fees'][0]['#markup'];
    $udise_code_id = $variables['content']['field_school'][0]['#mini_node']->get('field_udise_code')->getString();
    // Pass udise code to pdf twig.
    $variables['udise_code'] = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($udise_code_id)->getName();

    // $variables['entry_class'] = $entry_class_details;
    // Academic Session.
    $academic_session_key = $variables['content']['field_academic_session_claim'][0]['#markup'];
    $variables['academic_session'] = str_replace('_', '-', $academic_session_key);
    $school_id = $variables['content']['field_school'][0]['#mini_node']->id();

    // Approval Authority/ Payment head.
    $approval_authority_key = $variables['content']['field_payment_head'][0]['#markup'];

    // Additional Fees.
    $additional_fees = [];
    foreach ($variables['content']['field_additional_fees'] as $key => $value) {
      if (is_numeric($key)) {
        $additional_fees[] = ['value' => $value['#markup']];
      }
    }

    $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
    $variables['header'] = $reimbursement_helper->tableHeading($additional_fees);
    $variables['table_data'] = $reimbursement_helper->loadStudentData($school_id, $academic_session_key, $approval_authority_key, $additional_fees);
    $school_tution_fee = 0;
    $addtional_fee_fields = [];
    // Loop through header and check how many additional fees are defined.
    $keys = array_keys($variables['header']);

    // Find the positions of school_fees and goverment_fees.
    $school_fees_position = array_search('school_fees', $keys);
    $goverment_fees_position = array_search('goverment_fees', $keys);
    // Extract keys between school_fees and goverment_fees.
    $addtional_keys = array_slice($keys, $school_fees_position + 1, $goverment_fees_position - $school_fees_position - 1);
    $addtional_fee_fields = array_fill_keys($addtional_keys, 0);
    foreach ($variables['table_data'] as $rows) {
      $school_tution_fee += $rows['school_tution_fee'];
      foreach ($addtional_fee_fields as $key => $value) {
        if (isset($rows[$key])) {
          $addtional_fee_fields[$key] += $rows[$key];
        }
      }
    }
    $variables['school_tution_fee'] = $school_tution_fee;
    $variables['additional_fee'] = $addtional_fee_fields;
  }
  // Hide pdf button for school admin in full view mode for school claim
  // view page if current status is reset.
  if ($variables['view_mode'] == 'full' && $variables['bundle'] == 'school_claim') {
    $entity = $variables['eck_entity'];
    if ($entity->hasField('field_reimbursement_claim_status')) {
      $current_status = $entity->get('field_reimbursement_claim_status')->getString() ?? '';
      $roles = \Drupal::currentUser()->getRoles();
      // Hide pdf button if reimbursement claim status is reset.
      if ($current_status == 'reimbursement_claim_workflow_reset' && in_array('school_admin', $roles)) {
        unset($variables['content']['entity_print_view_pdf']);
      }
    }
  }
}

/**
 * Function to list the headers.
 */
function rte_mis_reimbursement_get_allowed_values($definition, $entity = NULL) {
  \Drupal::moduleHandler()->loadInclude('rte_mis_core', 'inc', 'rte_mis_core');
  $options = rte_mis_core_get_allowed_values($definition, $entity);
  return $options;
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_reimbursement_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (in_array($form_id, ['mini_node_school_fee_details_form',
    'mini_node_school_fee_details_edit_form',
  ])) {
    // Removed the suffix text.
    unset($form['field_state_fees']['widget']['add_more']['#suffix']);
    // Loop through each delta and remove the suffix text dynamically.
    foreach ($form['field_state_fees']['widget'] as $delta => $item) {
      if (is_numeric($delta)) {
        unset($form['field_state_fees']['widget'][$delta]['subform']['field_reimbursement_fees_type']['widget']['add_more']['#suffix']);
      }
    }
    $form['#validate'][] = 'rte_mis_reimbursement_school_fee_details_validate';
    if ($form_id == 'mini_node_school_fee_details_edit_form') {
      array_unshift($form['actions']['submit']['#submit'], 'rte_mis_reimbursement_state_fee_update_submit_handler');
    }
  }
  elseif (in_array($form_id, ['user_register_form', 'user_form'])) {
    // Get the current user.
    $current_user = \Drupal::currentUser();
    // Get the current user's roles.
    $current_user_roles = $current_user->getRoles();
    if ($form_id == 'user_register_form') {
      // Hide the field.
      unset($form['field_bank_details']);
    }
    else {
      $user = \Drupal::routeMatch()->getParameter('user');
      $current_edit_user_id = NULL;
      if ($user instanceof UserInterface) {
        $current_edit_user_id = $user->id();
      }
      // Check if the current user is not updating own profile,
      // State Admin, District Admin won't alter the bank details.
      if (isset($current_edit_user_id) && $current_edit_user_id != $current_user->id()) {
        // For different user admin, disable the bank details section.
        $form['field_bank_details']['#disabled'] = 'disabled';
      }
      else {
        // If the user role is `app_admin`, and user is editing own profile
        // then hide the bank details.
        if (array_intersect(['app_admin'], $current_user_roles)) {
          unset($form['field_bank_details']);
        }
      }
    }
  }
  elseif (in_array($form_id, ['mini_node_school_claim_form',
    'mini_node_school_claim_edit_form',
  ])) {
    // Get the current user role.
    $current_user_roles = \Drupal::currentUser()->getRoles(TRUE);
    if (in_array('school_admin', $current_user_roles)) {
      $form['field_reimbursement_claim_status']['#access'] = FALSE;
      $form['field_transaction_status']['#access'] = FALSE;
      $form['field_school']['#access'] = FALSE;
      // Hide amount received field for school admin.
      $form['field_amount_received']['#access'] = FALSE;
    }

    // Make total annual fees field as disabled field.
    if (!in_array('app_admin', $current_user_roles)) {
      $form['field_total_fees']['#disabled'] = TRUE;
      // For add school claim form hide total annual fees completely.
      if ($form_id == 'mini_node_school_claim_form') {
        $form['field_total_fees']['#access'] = FALSE;
      }
    }

    if (in_array($form_id, ['mini_node_school_claim_edit_form'])) {
      $form_mode = \Drupal::request()->query->get('display') ?? NULL;
      // If current user is app admin or school admin and this is the form mode
      // to modify the entity skip further alter process.
      if ($form_mode == 'school_claim_modify'
        && !in_array('app_admin', $current_user_roles)
        && !in_array('school_admin', $current_user_roles)) {
        // Amount received and transaction status fields should be visible
        // only if reimbursement status is either 'apporved by deo' or
        // 'payment pending'.
        $entity = $form_state->getformObject()->getEntity();
        if ($entity->hasField('field_reimbursement_claim_status') && !in_array($entity->get('field_reimbursement_claim_status')->getString(), [
          'reimbursement_claim_workflow_approved_by_deo',
          'reimbursement_claim_workflow_payment_pending',
        ])) {
          // Hide transaction status and amount received field.
          $form['field_transaction_status']['#access'] = FALSE;
          $form['field_amount_received']['#access'] = FALSE;
        }

        // Add custom submit handler for workflow single approval. This is added
        // as first callback, because forced transition are not working when
        // workflow form is used inside the edit form.
        if (in_array('district_admin', $current_user_roles)) {
          array_unshift($form['actions']['submit']['#submit'], 'rte_mis_reimbursement_single_approval_workflow_submit_handler');
        }
        return;
      }
      elseif ($form_mode != 'school_claim_modify') {
        if (array_intersect(['state_admin', 'district_admin', 'block_admin'], $current_user_roles)) {
          // Redirect to the same page with ?display=school_claim_modify.
          $current_path = \Drupal::service('path.current')->getPath();
          $url = Url::fromUserInput($current_path, [
            'query' => ['display' => 'school_claim_modify'],
          ])->toString();
          $response = new RedirectResponse($url);
          $response->send();
          exit;
        }

      }

      // Add custom submit handler for school admin.
      if (in_array('school_admin', $current_user_roles)) {
        $form['actions']['submit']['#submit'][] = 'rte_mis_reimbursement_school_claim_submit_handler';
      }
    }

    $form['field_academic_session_claim']['widget']['#ajax'] = [
      'callback' => 'rte_mis_reimbursement_school_claim_wrapper_callback',
      'wrapper' => 'school-claim-wrapper',
      'progress' => [
        'type' => 'fullscreen',
      ],
    ];

    $form['field_payment_head']['widget']['#ajax'] = [
      'callback' => 'rte_mis_reimbursement_school_claim_wrapper_callback',
      'wrapper' => 'school-claim-wrapper',
      'progress' => [
        'type' => 'fullscreen',
      ],
    ];

    $form['field_additional_fees']['widget']['#ajax'] = [
      'callback' => 'rte_mis_reimbursement_school_claim_wrapper_callback',
      'wrapper' => 'school-claim-wrapper',
      'progress' => [
        'type' => 'fullscreen',
      ],
    ];

    $form['school_claim_table_description'] = [
      '#type' => 'markup',
      '#markup' => '<strong>' . t('This table displays the most up-to-date fee details. Any changes made to the state-defined fees or the fees stated by the school will automatically update this data and be reflected here.') . '</strong>',
      '#weight' => array_key_exists('field_additional_fees', $form) ? $form['field_additional_fees']['#weight'] + 1 : $form['school_claim_table']['#weight'] - 1,
    ];

    $additional_fees = [];
    if ($form_state->hasValue('field_additional_fees')) {
      $additional_fees = $form_state->getValue('field_additional_fees') ?? NULL;
    }
    $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
    $header = $reimbursement_helper->tableHeading($additional_fees);
    $form['school_claim_table'] = [
      '#type' => 'table',
      '#header' => $header,
      '#empty' => t('No Student to display.'),
      '#prefix' => '<div id="school-claim-wrapper">',
      '#suffix' => '</div>',
      '#weight' => array_key_exists('school_claim_table_description', $form) ? $form['school_claim_table_description']['#weight'] + 1 : $form['actions']['submit']['#weight'] - 1,
    ];

    if (in_array($form_id, ['mini_node_school_claim_edit_form'])) {
      rte_mis_reimbursement_school_claim_wrapper_callback($form, $form_state);
    }
    $form['#validate'][] = 'rte_mis_reimbursement_school_claim_validate';
  }
  elseif ($form_id == 'mini_node_school_details_edit_form') {
    array_unshift($form['actions']['submit']['#submit'], 'rte_mis_reimbursement_school_fee_update_submit_handler');
  }
}

/**
 * Ajax callback function.
 */
function rte_mis_reimbursement_school_claim_wrapper_callback(&$form, $form_state) {
  // Get the object if the entity.
  $form_state_entity = $form_state->getformObject()->getEntity();
  // Get the values.
  $academic_session = !$form_state_entity->get('field_academic_session_claim')->isEmpty() ? $form_state_entity->get('field_academic_session_claim')->getString() : $form_state->getValue('field_academic_session_claim')[0]['value'] ?? NULL;
  $approval_authority = !$form_state_entity->get('field_payment_head')->isEmpty() ? $form_state_entity->get('field_payment_head')->getString() : $form_state->getValue('field_payment_head')[0]['value'] ?? NULL;
  $additional_fees = !$form_state_entity->get('field_additional_fees')->isEmpty() ? $form_state_entity->get('field_additional_fees')->getValue() : $form_state->getValue('field_additional_fees') ?? [];
  $school_id = !$form_state_entity->get('field_school')->isEmpty() ? $form_state_entity->get('field_school')->getString() : $form_state->getValue('field_school')[0]['target_id'] ?? NULL;

  $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
  $header = $reimbursement_helper->tableHeading($additional_fees);
  $data = $reimbursement_helper->loadStudentData($school_id, $academic_session, $approval_authority, $additional_fees);

  $form['school_claim_table'] = [
    '#type' => 'table',
    '#header' => $header,
    '#rows' => $data,
    '#empty' => t('No Student to display.'),
    '#attributes' => ['class' => ['school-claim-table']],
    '#prefix' => '<div id="school-claim-wrapper">',
    '#suffix' => '</div>',
    '#weight' => array_key_exists('field_payment_head', $form) ? $form['field_payment_head']['#weight'] + 1 : $form['actions']['submit']['#weight'] - 1,
  ];

  // Return the updated table within the AJAX callback.
  return $form['school_claim_table'];
}

/**
 * Callback to get the list of allowed values.
 */
function rte_mis_reimbursement_school_claim_heading(array $additional_fees = []) {
  $header = [
    'serial_number' => t('SNO'),
    'student_name' => t('Student Name'),
    'mobile_number' => t('Gaurdian Name'),
    'application_number' => t('Pre-session Class'),
    'parent_name' => t('Medium'),
    'school_fees' => t('School Tution Fees'),
  ];
  // Check if there are additional fees values.
  if (!empty($additional_fees)) {
    // Loop through the additional fees and append to the header dynamically.
    foreach ($additional_fees as $fee) {
      $value = $fee['value'] ?? NULL;
      if ($value) {
        $header[$value] = t('@value Fees', ['@value' => ucfirst($fee['value'])]);
      }
    }
  }
  $header['goverment_fees'] = t('Govt Fees');
  $header['Total'] = t('Total');
  return $header;
}

/**
 * Custom validation handler for school fee details entity.
 */
function rte_mis_reimbursement_school_fee_details_validate($form, &$form_state) {
  // Initialize arrays to track unique selections.
  $selected_board_types = [];

  $fee_details_active = $form_state->getValue('status');
  if (!empty($fee_details_active) && $fee_details_active['value']) {
    // Check if there are any existing active school fee details for the same
    // academic year & same payment head.
    // Get the current mini_node id.
    $fee_details_id = 0;
    $fee_details = \Drupal::routeMatch()->getParameter('mini_node');
    if (!empty($fee_details)) {
      $fee_details_id = $fee_details->id();
    }
    $academic_session_academic_year = $form_state->getValue('field_academic_year')[0]['value'] ?? NULL;
    $field_payment_head = $form_state->getValue('field_payment_head')[0]['value'] ?? NULL;
    $academic_session_query = \Drupal::entityTypeManager()->getStorage('mini_node')->getQuery();
    $academic_session_query->accessCheck(TRUE)
      ->condition('type', 'school_fee_details')
      ->condition('field_academic_year', $academic_session_academic_year)
      ->condition('field_payment_head', $field_payment_head)
      ->condition('status', 1)
      ->condition('id', $fee_details_id, '!=');
    $nids = $academic_session_query->execute();

    if (count($nids) > 0) {
      $field_payment_head = str_replace('_', ' ', $field_payment_head);
      $form_state->setErrorByName('field_academic_year', t('Two school fee details with same Payment Head: @payments_head
      in a same academic year cannot be in active state.', ['@payments_head' => ucfirst($field_payment_head)]));
      $form_state->setErrorByName('field_payment_head', ' ');
    }

    if (!empty($form_state->getValue('field_state_fees'))) {
      // Loop through each delta (each field_state_fees instance).
      foreach ($form_state->getValue('field_state_fees') as $outer_delta => $state_fee_value) {
        if (is_numeric($outer_delta)) {
          // Get the selected value for field_board_type.
          $selected_board_type = $state_fee_value['subform']['field_board_type'][0]['value'];
          $selected_education_level = $state_fee_value['subform']['field_education_level'][0]['value'];
          $combination = $selected_board_type . '|' . $selected_education_level;

          // Check if the board type was already selected.
          if (in_array($combination, $selected_board_types)) {
            // Set an error directly on the form element
            // for duplicate board type.
            $form_state->setErrorByName(
              "field_state_fees][$outer_delta][subform][field_board_type",
              t('The selected board & education level type must be unique for each entry.')
            );
            $form_state->setErrorByName(
              "field_state_fees][$outer_delta][subform][field_education_level",
              ""
            );
          }
          else {
            // Add the selected board type to the array for uniqueness tracking.
            $selected_board_types[] = $combination;
          }

          // Now, validate the inner field_reimbursement_fees_type
          // for unique fees types.
          if (!empty($state_fee_value['subform']['field_reimbursement_fees_type'])) {
            $selected_fees_types = [];

            // Loop through each delta for field_reimbursement_fees_type.
            foreach ($state_fee_value['subform']['field_reimbursement_fees_type'] as $inner_delta => $reimbursement_fee_value) {
              if (is_numeric($inner_delta)) {
                // Get the selected value for field_fees_type.
                $selected_fees_type = $reimbursement_fee_value['subform']['field_fees_type'];

                // Check if the fees type has already been selected
                // within the same reimbursement.
                if (in_array($selected_fees_type, $selected_fees_types)) {
                  // Set an error on the specific form element
                  // for duplicate fees type.
                  $form_state->setErrorByName(
                    "field_state_fees][$outer_delta][subform][field_reimbursement_fees_type][$inner_delta][subform][field_fees_type",
                    t('The selected fees type must be unique within each reimbursement.')
                  );
                }
                else {
                  // Add the selected fees type to the array
                  // to track uniqueness.
                  $selected_fees_types[] = $selected_fees_type;
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Custom validation handler for school claim entity.
 */
function rte_mis_reimbursement_school_claim_validate($form, &$form_state) {
  // Get the values from the form.
  $academic_year = $form_state->getValue('field_academic_session_claim')[0]['value'] ?? NULL;
  $approval_authority = $form_state->getValue('field_payment_head')[0]['value'] ?? NULL;
  $school_id = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id())->get('field_school_details')->getString() ?? NULL;
  $bundle = 'school_claim';

  $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');

  if (in_array($form['#form_id'], ['mini_node_school_claim_form'])) {
    // Check if a mini node with the same fields already exists.
    if ($reimbursement_helper->checkExistingClaimMiniNode($bundle, $academic_year, $approval_authority, $school_id)) {
      // Set an error on the form with a custom message.
      $form_state->setErrorByName('field_academic_session_claim', t('A request claim with the same Academic Year @year and Approval Authority @authority already exists.', [
        '@year' => str_replace('_', '-', $academic_year),
        '@authority' => ucwords(str_replace('_', ' ', $approval_authority)),
      ]));
      $form_state->setErrorByName('field_payment_head', '');
    }
  }
  // Check for reset limit.
  if (in_array($form['#form_id'], ['mini_node_school_claim_form', 'mini_node_school_claim_edit_form'])) {
    // Check if school admin is allowed to raise reimbursement claim
    // we restrict school admin if configured reset limit has crossed.
    $limit_hit = $reimbursement_helper->hasHitResetLimit(
      $academic_year,
      $school_id,
      $approval_authority,
    );
    if ($limit_hit) {
      // Set an error on the form with a custom message.
      $form_state->setErrorByName('field_academic_session_claim', t('Claim submit limit has been crossed for the Academic Year @year and Approval Authority @authority. You cannot raise another request.', [
        '@year' => str_replace('_', '-', $academic_year),
        '@authority' => ucwords(str_replace('_', ' ', $approval_authority)),
      ]));
      $form_state->setErrorByName('field_payment_head', '');
    }
  }
  $class_list_selected = [];
  // Suppose there is no data then claim should not be submitted.
  if ($approval_authority) {
    $class_list_selected = $reimbursement_helper->getClassList($approval_authority);
  }

  // For the first time, School admin needs to submit claim.
  // Get the object if the entity.
  $form_state_entity = $form_state->getformObject()->getEntity();
  $current_user = \Drupal::currentUser();
  $current_user_roles = $current_user->getRoles(TRUE);
  // If the form_state doesnot have value,
  // that means value was never saved, for the first time,
  // school admin will raise a claim so using user info.
  $school_id = !$form_state_entity->get('field_school')->isEmpty() ? $form_state_entity->get('field_school')->getString() : NULL;
  if ($school_id == NULL && in_array('school_admin', $current_user_roles)) {
    $current_user_entity = \Drupal::entityTypeManager()->getStorage('user')->load($current_user->id());
    $school_id = $current_user_entity->get('field_school_details')->getString();
  }
  // Call the getStudentList method to get the list of students.
  $student_list = $reimbursement_helper->getStudentList($academic_year, $class_list_selected, $school_id);

  // Check if the list of students is empty.
  if (empty($student_list)) {
    // Set a global error on the form.
    $form_state->setError($form, t('No students found for the selected class and academic year.'));
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function rte_mis_reimbursement_mini_node_presave(EntityInterface $entity) {
  // Check if the entity is of the desired bundle and has the required field.
  if ($entity instanceof EckEntityInterface && $entity->bundle() == 'school_claim') {
    if ($entity->hasField('field_admitted_student')) {
      // Get the academic year and approval authority from the entity.
      $academic_year = $entity->get('field_academic_session_claim')->getString() ?? NULL;
      $approval_authority = $entity->get('field_payment_head')->getString() ?? NULL;

      // Define the class list and user linked school. Adjust as needed.
      $class_list_selected = [];
      if ($approval_authority == 'central_head') {
        $school_config = \Drupal::config('rte_mis_school.settings');
        // Consider till class 8th.
        $class_levels = $school_config->get('field_default_options.class_level') ?? [];

        foreach ($class_levels as $key => $class_level) {
          // Consider only students from class 1st to 8th for the central.
          if ($key >= 3) {
            $class_list_selected[] = $key;
            // Search the key for the value till class 8th.
            if ($class_level == '8th') {
              break;
            }
          }
        }
      }
      elseif ($approval_authority == 'state_head') {
        // Check in config, if state payment head is allowed.
        $reimbursement_config = \Drupal::config('rte_mis_reimbursement.settings');
        $state_fee_status = $reimbursement_config->get('payment_heads.enable_state_head');
        if ($state_fee_status) {
          // Consider till class 8th.
          $class_levels = $reimbursement_config->get('payment_heads.state_class_list') ?? [];
          $class_list_selected = $class_levels;
        }
        else {
          $class_list_selected = [];
        }
      }
      $current_user = \Drupal::currentUser();
      $current_user_entity = \Drupal::entityTypeManager()->getStorage('user')->load($current_user->id());
      // For the first time, School admin needs to submit claim.
      $user_linked_school = !empty($entity->get('field_school')->getString()) ? $entity->get('field_school')->getString() : $current_user_entity->get('field_school_details')->getString() ?? NULL;

      // Proceed only if we have an academic year.
      if (isset($academic_year)) {
        $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
        $student_performance_ids = $reimbursement_helper->getStudentList($academic_year, $class_list_selected, $user_linked_school);

        // If there are any IDs returned,
        // set them in the 'field_admitted_student' field.
        if (!empty($student_performance_ids)) {
          // Set the field value with the returned entity IDs.
          $entity->set('field_admitted_student', array_values($student_performance_ids));
          $entity->set('field_school', $user_linked_school);
        }
        else {
          // If no results are found, clear the field or handle it as needed.
          $entity->set('field_admitted_student', []);
          $entity->set('field_school', NULL);
        }
      }
    }

    // Update the value of total annual fees when entity is saved.
    if ($entity->hasField('field_total_fees')
      && in_array('school_admin', \Drupal::currentUser()->getRoles())) {
      // Get the values from the entity object.
      $academic_session = $entity->get('field_academic_session_claim')->getString() ?? NULL;
      $approval_authority = $entity->get('field_payment_head')->getString() ?? NULL;
      $additional_fees = $entity->get('field_additional_fees')->getValue() ?? [];
      $school_id = $entity->get('field_school')->getString() ?? NULL;

      $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
      // Get the fees data for all the students for this reimbursement.
      $data = $reimbursement_helper->loadStudentData(
        $school_id,
        $academic_session,
        $approval_authority,
        $additional_fees,
      );

      // Calculate the total fees for reimbursement.
      $students_total_fees = array_column($data, 'total');
      $total_fees = 0;

      foreach ($students_total_fees as $fees) {
        $total_fees += $fees;
      }
      // Format fees ot use upto two decimal places.
      $total_fees = number_format($total_fees, 2, '.', '');
      // Set value of total fees for school claim entity.
      $entity->set('field_total_fees', $total_fees);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function rte_mis_reimbursement_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'reimbursement_claim') {
    $view->addCacheContext('user');
    $roles = \Drupal::currentUser()->getRoles() ?? [];
    // Only applicable for district and block admins.
    $user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
    if (array_intersect($roles, ['district_admin', 'block_admin'])) {
      if ($user instanceof UserInterface) {
        $id = [0];
        // Get the location details from user entity.
        $selected_location = $user->get('field_location_details')->entity ?? NULL;
        if ($selected_location instanceof TermInterface) {
          $location_tree = [];
          // Get the id of term assuming the user is district admin.
          $district_id = $id[] = $selected_location->id();
          // Load the tree if location based in district/block.
          if (!empty($district_id)) {
            $location_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('location', $district_id) ?? [];
          }
          if (!empty($location_tree)) {
            foreach ($location_tree as $value) {
              $id[] = $value->tid;
            }
          }
        }
        // Create left join for `field_location`.
        $definition = [
          'table' => 'mini_node__field_location',
          'field' => 'entity_id',
          'left_table' => 'mini_node_field_data_mini_node__field_school',
          'left_field' => 'id',
          'type' => 'LEFT',
        ];
        $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
        $query->addRelationship('mini_node__field_location', $join, 'mini_node_field_data');
        // Add condition to match for the school location with the
        // district/block admin location.
        $query->addWhere(0, 'mini_node__field_location.field_location_target_id', $id, 'IN');
      }
    }
    elseif (in_array('school_admin', $roles)) {
      if ($user instanceof UserInterface) {
        // Get the school id linked with the current loggedIn user.
        $schoolId = $user->get('field_school_details')->getString() ?? NULL;
        if ($schoolId) {
          // Query to filter based on school.
          $definition = [
            'table' => 'mini_node__field_school',
            'field' => 'entity_id',
            'left_table' => 'mini_node_field_data',
            'left_field' => 'id',
            'type' => 'LEFT',
          ];
          $join = \Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
          $query->addRelationship('mini_node__field_school', $join, 'mini_node_field_data');
          // Add a condition to filter by specific school ids.
          $query->addWhere('0', 'mini_node__field_school.field_school_target_id', $schoolId, '=');
        }
      }
      // Disable status filter for school admins as we want to show
      // published and unpubished school claim mini nodes.
      foreach ($query->where as $key => $condition_group) {
        // Iterate through the where conditions.
        foreach ($condition_group['conditions'] as $index => $condition) {
          // Check for the status condition.
          if ($condition['field'] == 'mini_node_field_data.status') {
            // Remove the condition.
            unset($query->where[$key]['conditions'][$index]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function rte_mis_reimbursement_views_pre_render(ViewExecutable $view) {
  // Check if the current view and display match the target view and display.
  if ($view->id() === 'reimbursement_claim' && $view->current_display === 'page_1') {
    // Get the current user object.
    $current_user_roles = \Drupal::currentUser()->getRoles(TRUE);
    // Check if the current user has a specific role.
    if (in_array('school_admin', $current_user_roles)) {
      // Specify the fields you want to hide.
      $fields_to_hide = [
        'field_udise_code',
        'field_school_name',
        'field_transaction_status',
      ];

      // Loop through the fields and unset them from the view's display handler.
      foreach ($fields_to_hide as $field_name) {
        // Check if the field handler exists in the view's display handler.
        if (isset($view->display_handler->handlers['field'][$field_name])) {
          // Unset the field handler to hide it from the view.
          unset($view->display_handler->handlers['field'][$field_name]);
        }
      }
    }

    // Unset update link from view display handler.
    $dropbutton_field_display = $view->display_handler->handlers['field']['dropbutton'];
    if (isset($dropbutton_field_display->options)) {
      $dropbutton_fields = $dropbutton_field_display->options['fields'] ?? [];
      // Hide update link if reimbursement session is not active or current
      // user role is school admin.
      if (!\Drupal::service('rte_mis_core.core_helper')->isAcademicSessionValid('reimbursement_claim')
        || in_array('school_admin', $current_user_roles)) {
        // Check if key for custom text field 'nothing' is available.
        if (!empty($dropbutton_fields) && isset($dropbutton_fields['nothing'])) {
          // To unset the 'update' link we need to unset 'nothing' field value.
          $view->display_handler->handlers['field']['dropbutton']->options['fields']['nothing'] = '0';
        }
      }
      // Hide edit link for all roles except school admin.
      if (!in_array('school_admin', $current_user_roles)) {
        // Check if key for custom text field 'nothing' is available.
        if (!empty($dropbutton_fields) && isset($dropbutton_fields['edit_mini_node'])) {
          // To unset the 'edit' link we need to unset 'nothing' field value.
          $view->display_handler->handlers['field']['dropbutton']->options['fields']['edit_mini_node'] = '0';
        }
      }
    }
  }
  elseif ($view->id() === 'academic_sessions_list' && $view->current_display === 'page_3') {
    if (!\Drupal::service('rte_mis_core.core_helper')->isAcademicSessionValid('reimbursement_claim')) {
      unset($view->display_handler->handlers['field']['nothing']);
    }
  }

}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function rte_mis_reimbursement_mini_node_view(array &$build, EckEntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'school_claim' && $view_mode == 'full') {
    // Get academic year, $approval authority and additional fees value.
    $academic_year = $entity->get('field_academic_session_claim')->value ?? NULL;
    $approval_authority = $entity->get('field_payment_head')->value ?? NULL;
    $additional_fees = $entity->get('field_additional_fees')->getValue() ?? NULL;
    $school_id = $entity->get('field_school')->getString() ?? NULL;
    if ($entity->hasField('field_reimbursement_claim_status')) {
      // Add cache tags for reimbursement configuration.
      $reimbursement_config = \Drupal::config('rte_mis_reimbursement.settings');
      $build['#cache']['tags'] = Cache::mergeTags($build['#cache']['tags'] ?? [], $reimbursement_config->getCacheTags());

      $workflow_field = $display->getComponent('field_reimbursement_claim_status') ?? [];
      // Creating a render array to render reimbursement claim status
      // workflow history.
      $build['field_reimbursement_claim_status_history'] = $entity->get('field_reimbursement_claim_status')->view([
        'type' => 'workflow_state_history',
      ]);
      $build['field_reimbursement_claim_status_history']['#title'] = t('Reimbursement Verification History');
      // Place workflow history field before the workflow form field.
      $build['field_reimbursement_claim_status_history']['#weight'] = isset($workflow_field['weight']) ? $workflow_field['weight'] - 1 : 99;
    }

    // Row data.
    $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
    $header = $reimbursement_helper->tableHeading($additional_fees);
    $data = $reimbursement_helper->loadStudentData($school_id, $academic_year, $approval_authority, $additional_fees);

    $build['school_claim_table'] = [
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $data,
      '#empty' => t('No data available.'),
      '#prefix' => '<div class="reimbursement-student-tracking-table-wrapper">',
      '#suffix' => '</div>',
      '#attributes' => ['class' => ['tabl']],
      '#weight' => 100,
    ];

    // Add a custom class for the mininode container needed for styling
    // of entity fields on mini node view page.
    $build['#attributes']['class'][] = 'school-claim-mini-node';
  }
}

/**
 * Implements hook_workflow_permitted_state_transitions_alter().
 */
function rte_mis_reimbursement_workflow_permitted_state_transitions_alter(array &$transitions, array $context) {
  $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
  $is_single_level_approval = $reimbursement_helper->isSingleLevelApprovalEnabled();
  // Get payment approver from reimbursement configurations.
  $payment_approver = \Drupal::config('rte_mis_reimbursement.settings')->get('payment_approver') ?? 'state';
  // Restrict the possible transitions based on approval level and payment
  // configurations.
  if ($context['field_name'] == 'field_reimbursement_claim_status') {
    // For block admin.
    if (in_array('block_admin', $context['user']->getRoles())) {
      // If single level approval is enabled we disable workflow state
      // transitions for block admin.
      if ($is_single_level_approval) {
        unset($transitions['reimbursement_claim_workflow_submitted_approved_by_beo']);
        unset($transitions['reimbursement_claim_workflow_submitted_rejected']);
      }

      // If payment approver is not set as 'block' we restrict the
      // transitions to 'payment completed' and 'payment pending' states.
      if ($payment_approver != 'block') {
        $reimbursement_helper->disablePaymentApprovalTransitions($transitions);
      }
    }
    // For district admin.
    elseif (in_array('district_admin', $context['user']->getRoles())) {
      // If single level approval is enabled we make sure that only district
      // admin will be able to update the state.
      if ($is_single_level_approval) {
        // This array contain key as from states and values is possible
        // transitions.
        $possible_transition = [
          // From submitted state.
          'reimbursement_claim_workflow_submitted' => [
            'reimbursement_claim_workflow_submitted_reset',
            'reimbursement_claim_workflow_submitted_approved_by_beo',
            'reimbursement_claim_workflow_submitted_rejected',
          ],
          // From BEO approved state.
          'reimbursement_claim_workflow_approved_by_beo' => [
            'reimbursement_claim_workflow_approved_by_beo_approved_by_deo',
            'reimbursement_claim_workflow_approved_by_beo_rejected',
            'reimbursement_claim_workflow_approved_by_beo_submitted',
          ],
        ];
        $current_state = $context['state'];
        $allowed_transition = $current_state->getTransitions($context['entity'], '', $context['user'], TRUE) ?? [];
        // Set allowed transitions.
        if (isset($possible_transition[$current_state->id()])) {
          foreach ($possible_transition[$current_state->id()] as $value) {
            if (isset($allowed_transition[$value])) {
              $transitions[$value] = $allowed_transition[$value];
            }
          }
        }
      }

      // If payment approver is not set as 'district' we restrict the
      // transitions to 'payment completed' and 'payment pending' states.
      if ($payment_approver != 'district') {
        $reimbursement_helper->disablePaymentApprovalTransitions($transitions);
      }
    }
    // If state admin is not configured as payment approver we restrict the
    // transitions to 'payment completed' and 'payment pending' states.
    elseif (in_array('state_admin', $context['user']->getRoles()) && $payment_approver != 'state') {
      $reimbursement_helper->disablePaymentApprovalTransitions($transitions);
    }
  }
}

/**
 * Implements hook_workflow().
 */
function rte_mis_reimbursement_workflow($op, WorkflowTransitionInterface $transition, UserInterface $user) {
  if ($op == 'transition pre' && $transition->wid->getString() == 'reimbursement_claim_workflow' && $transition->getTargetEntityTypeId() == 'mini_node' && $transition->hasStateChange()) {
    $config_factory = \Drupal::service('config.factory');
    // Get the mail settings and messages.
    $mailConfig = $config_factory->get('rte_mis_mail.settings');
    // Get the entity id of the linked school performance entity.
    $school_claim_entity = $transition->getTargetEntity();
    // Get the field school value.
    $school_entity_id = $school_claim_entity->get('field_school')->getString() ?? NULL;
    $academic_session = $school_claim_entity->get('field_academic_session_claim')->getString() ?? NULL;
    $payment_head = $school_claim_entity->get('field_payment_head')->getString() ?? NULL;
    if ($school_entity_id) {
      // Get the udise code from the school entity.
      // Match the udise code from the user entity.
      $udise_code = \Drupal::entityTypeManager()->getStorage('mini_node')->load($school_entity_id)->get('field_udise_code')->getString();
      $udise_label = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($udise_code)->getName();
      // Now load user based on the identified mini node.
      $user = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties([
        'name' => $udise_label,
      ]);
    }
    $sms_provider = \Drupal::service('sms.provider');
    if ($user) {
      $user = reset($user);
    }

    if ($user instanceof UserInterface) {
      $user_mobile_number = $user->get('field_phone_number')->value;
      $user_email_id = $user->getEmail();

      // Check if sending email is enabled.
      $email_status = $mailConfig->get('school_reimbursement_notification_email.enabled_reimbursement_email_notification') ?? '';

      if ($email_status) {
        // Email subject & body.
        $email_subject = $mailConfig->get('school_reimbursement_notification_email.email_reimbursement_notification_subject') ?? '';
        $raw_email_body = $mailConfig->get('school_reimbursement_notification_email.email_reimbursement_notification_message') ?? '';
        // Replace the tokens.
        $modified_email_body = str_replace([
          '!user',
          '!existing_state',
          '!modified_state',
          '!academic_session',
          '!payment_head',
        ],
        [
          $user->getDisplayName(),
          $transition->getFromState()->label(),
          $transition->getToState()->label(),
          $academic_session,
          $payment_head,
        ], $raw_email_body);

        $params = [];
        if (!empty($email_subject) && !empty($raw_email_body)) {
          $params['subject'] = $email_subject;
          $params['message'] = $modified_email_body;
        }

        $email_sent = \Drupal::service('plugin.manager.mail')->mail('rte_mis_reimbursement', 'state_change', $user_email_id, \Drupal::languageManager()->getCurrentLanguage(), $params);
      }
      // Check if sending sms is enabled.
      $sms_status = $mailConfig->get('mobile_number_reimbursement_notification.enable_reimbursement_mobile_number_notification') ?? '';

      if ($sms_status) {
        // Get the sms body from the config.
        $sms_body = $mailConfig->get('mobile_number_reimbursement_notification.mobile_number_reimbursement_notification_message') ?? '';

        $modified_sms_body = str_replace([
          '!user',
          '!existing_state',
          '!modified_state',
          '!academic_session',
          '!payment_head',
        ],
        [
          $user->getDisplayName(),
          $transition->getFromState()->label(),
          $transition->getToState()->label(),
          $academic_session,
          $payment_head,
        ], $sms_body);

        $sms_sent = (new SmsMessage())
          // Set the message.
          ->setMessage($modified_sms_body)
          // Set recipient phone number.
          ->addRecipient($user_mobile_number)
          ->setDirection(Direction::OUTGOING);
        $sms_provider->send($sms_sent);
      }
    }

    if (isset($email_sent)) {
      \Drupal::logger('School reimbursment claim status')->notice(t("Email has been sent to @user regarding their reimbursement claim status from @previous to @latest for the @session with @head.", [
        '@user' => $user->getDisplayName(),
        '@previous' => $transition->getFromState()->label(),
        '@latest' => $transition->getToState()->label(),
        '@session' => $academic_session,
        '@head' => $payment_head,
      ]));
    }
    else {
      \Drupal::logger('School reimbursment claim status')->notice(t("Sending response status via email is not enabled."));
    }

    if (isset($sms_sent)) {
      \Drupal::logger('School reimbursment claim status')->notice(t("SMS has been sent to @user regarding their reimbursement claim status from @previous to @latest for the @session with @head.", [
        '@user' => $user->getDisplayName(),
        '@previous' => $transition->getFromState()->label(),
        '@latest' => $transition->getToState()->label(),
        '@session' => $academic_session,
        '@head' => $payment_head,
      ]));
    }
    else {
      \Drupal::logger('School reimbursment claim status')->notice(t("Sending response status via sms is not enabled."));
    }

  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function rte_mis_reimbursement_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];
  if ($view->id() == 'reimbursement_claim' && $view->current_display == 'page_1' && $field->field == 'dropbutton') {
    // Get the current user object.
    $current_user_roles = \Drupal::currentUser()->getRoles(TRUE);
    // Skip further checks if session is not active or user is school admin
    // as this is already disabled from view display handler.
    if (!\Drupal::service('rte_mis_core.core_helper')->isAcademicSessionValid('reimbursement_claim')
    || in_array('school_admin', $current_user_roles)) {
      return;
    }

    $row = $variables['row'];
    if (property_exists($row, '_entity')) {
      $entity = $row->_entity;
      // Check if admin should be able to udpate the claim or not.
      $has_udpate_access = \Drupal::service('rte_mis_reimbursement.reimbursement_helper')->canUpdateReimbursementClaim($entity);
      // Return if current user can update the reimbursement claim.
      if ($has_udpate_access) {
        return;
      }
      // Remove the update link if admin does not have the access to update the
      // reimbursement claim.
      $output = $variables['output'];
      if ($output instanceof ViewsRenderPipelineMarkup) {
        $output_string = $output->__toString();
        // Remove the update link from the dropbutton markup.
        $output_string = preg_replace(
          '/<li class="dropbutton__item">.*?<\/li>\s*<\/ul>/s',
          '</ul>',
          $output_string,
        );
        // Since, we now have only one link in dropbutton we need to change the
        // class to single so that dropdown arrow is not added.
        $output_string = str_replace('dropbutton--multiple', 'dropbutton--single', $output_string);
        $markup = ViewsRenderPipelineMarkup::create($output_string);
        // Now set the output in view render array.
        $variables['output'] = $markup;
      }
    }
  }
}

/**
 * Custom submit handler to process the single workflow transition.
 */
function rte_mis_reimbursement_single_approval_workflow_submit_handler(&$form, FormStateInterface $form_state) {
  // Get the school_detail mini_node entity.
  $school_claim_mini_node = $form_state->getformObject()->getEntity();
  if ($school_claim_mini_node instanceof EckEntityInterface) {
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();
    // Below condition is for acting on single approval feature.
    // This is used because the transitions were not happening from edit pages.
    $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
    $is_single_level_approval = $reimbursement_helper->isSingleLevelApprovalEnabled();
    $roles = \Drupal::currentUser()->getRoles();
    // If single level approval is enabled only 'district_admin' will be
    // allowed to udpate the reimbursement status.
    if ($is_single_level_approval && in_array('district_admin', $roles)) {
      $transition = $form_state->getValue('field_reimbursement_claim_status')[0]['workflow_transition'] ?? NULL;
      if ($transition instanceof WorkflowTransitionInterface) {
        $reimbursement_helper->processSingleLevelApproval($transition);
      }
    }
  }
}

/**
 * Custom submit handler to re submit claim.
 */
function rte_mis_reimbursement_school_claim_submit_handler(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getformObject()->getEntity();
  // Update the status of reimbursement claim to submitted when
  // school admin updates the claim.
  if ($entity->hasField('field_reimbursement_claim_status')) {
    $current_user = \Drupal::currentUser();
    // Get current status for reimbursement claim.
    $current_state = $entity->get('field_reimbursement_claim_status')->getString();
    if ($current_state == 'reimbursement_claim_workflow_reset') {
      // Update new state to education completed, indicates that
      // state has been updated and set to education completed.
      $transition = WorkflowTransition::create([
        0 => $current_state,
        'field_name' => 'field_reimbursement_claim_status',
      ]);
      // Set the target entity.
      $transition->setTargetEntity($entity);
      // Set the target state to 'Education completed'.
      $transition->setValues(
        'reimbursement_claim_workflow_submitted',
        $current_user->id(),
        \Drupal::time()->getRequestTime(),
        t('Claim request has been re-submitted.'),
      );
      $transition->executeAndUpdateEntity();
    }
  }
}

/**
 * Custom submit handler to reset claim on school fee details update.
 */
function rte_mis_reimbursement_school_fee_update_submit_handler(&$form, FormStateInterface $form_state) {
  $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
  // Get school details entity from form object.
  $entity = $form_state->getformObject()->getEntity();
  // Get fees details from entity.
  $previous_fee_deatails = $reimbursement_helper->schoolFeeDetails($entity->id());
  // Get fees details from form state object.
  $school_fee_details = $reimbursement_helper->getSchoolFeeDetailsByForm($form_state);
  // Get the difference between new and prev fee details arrays.
  $fee_updates = $reimbursement_helper->findArrayDifferences($previous_fee_deatails, $school_fee_details);
  $school_config = \Drupal::config('rte_mis_school.settings');
  // Consider till class 8th.
  $class_levels = $school_config->get('field_default_options.class_level') ?? [];

  $reset_message = '';
  // If there are any fee updates build a reset message
  // and reset the reimbursement claim.
  if (!empty($fee_updates)) {
    $reset_message = t('Auto Reset. School Fees changed for:');
    foreach ($fee_updates as $key => $value) {
      $keys = explode('|', $key);
      $reset_message .= t('Education type: @education_type; Medium @medium; Education level: @education_level;', [
        '@education_type' => $keys[0],
        '@medium' => $keys[1],
        '@education_level' => $keys[2],
      ]);
      foreach ($value as $class => $updates) {
        $class = $class_levels[$class] ?? $class;
        // When existing fees is changed.
        if ($updates['action'] == 'changed') {
          $reset_message .= t('Class: @class; Value changed from @old_value to @new_value.', [
            '@class' => $class,
            '@old_value' => $updates['old_value'],
            '@new_value' => $updates['new_value'],
          ]);
        }
        // When new fee details are added.
        elseif ($updates['action'] == 'added') {
          $reset_message .= t('Class: @class; Fees added @new_value.', [
            '@class' => $class,
            '@new_value' => $updates['new_value'],
          ]);
        }
        // When fee details are removed.
        else {
          $reset_message .= t('Class: @class; Fees removed @old_value.', [
            '@class' => $class,
            '@new_value' => $updates['old_value'],
          ]);
        }
      }
    }
    $academic_year = $entity->get('field_academic_year')->getString();
    $current_user_id = \Drupal::currentUser()->id();
    // Get school claim entity for this school.
    $school_claim_ids = \Drupal::entityTypeManager()->getStorage('mini_node')->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'school_claim')
      ->condition('field_academic_session_claim', $academic_year)
      ->condition('field_school', $entity->id())
      ->execute();
    // Reset the reimbursement claims.
    foreach ($school_claim_ids as $school_claim_id) {
      $reimbursement_helper->resetReimbursementClaim($school_claim_id, $reset_message, $current_user_id);
    }
  }
}

/**
 * Custom submit handler to reset claim on state fee details update.
 */
function rte_mis_reimbursement_state_fee_update_submit_handler(&$form, FormStateInterface $form_state) {
  $reimbursement_helper = \Drupal::service('rte_mis_reimbursement.reimbursement_helper');
  // Get school details entity from form object.
  $entity = $form_state->getformObject()->getEntity();
  $academic_year = $entity->get('field_academic_year')->getString();
  $approval_authority = $entity->get('field_payment_head')->getString();

  // Get fees details from entity.
  $new_fee_details = $reimbursement_helper->getStateFeeDetailsByForm($form_state);
  $prev_fee_details = $reimbursement_helper->getStateFeeDetailsFromEntity($entity->id());

  // Get the difference between new and prev fee details arrays.
  $fee_updates = $reimbursement_helper->findArrayDifferences($prev_fee_details, $new_fee_details);
  $reset_message = '';
  // If there are any fee updates build a reset message
  // and reset the reimbursement claim.
  if (!empty($fee_updates)) {
    // Loop over the updated items and prepare the array
    // of board types used and education levels.
    $boards = [];
    foreach ($fee_updates as $key => $updates) {
      $fee_keys = explode('|', $key);
      $boards[] = $fee_keys[0];
    }
    // Get the list of reimbursement claim with the board type
    // and approval authority.
    $claim_mini_nodes = \Drupal::entityTypeManager()->getStorage('mini_node')->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'school_claim')
      ->condition('field_payment_head', $approval_authority)
      ->condition('field_academic_session_claim', $academic_year)
      ->condition('field_school.entity.field_board_type', $boards, 'IN')
      ->execute();

    $reset_message = t('Auto Reset. State Fees changed for:');
    foreach ($fee_updates as $key => $value) {
      $keys = explode('|', $key);
      $reset_message .= t('Board type: @education_type; Education level: @education_level;', [
        '@education_type' => $keys[0],
        '@education_level' => $keys[1],
      ]);
      foreach ($value as $type => $updates) {
        // When existing fees is changed.
        if ($updates['action'] == 'changed') {
          $reset_message .= t('Fee type: @type; Value changed from @old_value to @new_value.', [
            '@type' => $type,
            '@old_value' => $updates['old_value'],
            '@new_value' => $updates['new_value'],
          ]);
        }
        // When new fee details are added.
        elseif ($updates['action'] == 'added') {
          $reset_message .= t('Fee type: @type; Fees added @new_value.', [
            '@type' => $type,
            '@new_value' => $updates['new_value'],
          ]);
        }
        // When fee details are removed.
        else {
          $reset_message .= t('Fee type: @type; Fees removed @old_value.', [
            '@type' => $type,
            '@new_value' => $updates['old_value'],
          ]);
        }
      }
    }
    $current_user_id = \Drupal::currentUser()->id();
    // State fees details update queue.
    $queue = \Drupal::queue('reset_reimbursement_claim_queue');
    // Push items in queue for reset operation.
    foreach ($claim_mini_nodes as $school_claim_id) {
      $queue_data = [
        'message' => $reset_message,
        'id' => $school_claim_id,
        'uid' => $current_user_id,
      ];
      $queue->createItem($queue_data);
    }
  }

}
