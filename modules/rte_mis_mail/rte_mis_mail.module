<?php

/**
 * @file
 * Primary module hooks for registration_otp module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rte_mis_mail_form_user_register_form_alter(array &$form, FormStateInterface &$form_state) {
  // Load the configuration object.
  $config = \Drupal::config('email_sms_form.settings');
  // Get the status of verification.
  $verify = $config->get('email_verify');
  $form['#cache']['tags'] = Cache::mergeTags($form['#cache']['tags'], $config->getCacheTags());

  if ($verify) {
    $form['email_container'] = [
      '#type' => 'container',
      '#attributes' => ['id' => ['email-container']],
    ];
    // Hidden field for controlling the display.
    $form['display_handler'] = [
      '#type' => 'hidden',
      '#default_value' => FALSE,
    ];
    // Move the existing email field into the container.
    $form['email_container']['account']['mail'] = $form['account']['mail'];
    $form['email_container']['account']['mail']['#attributes']['class'][] = 'container-email-field';
    // Remove the original placement of the email field.
    unset($form['account']['mail']);
    // Add the Verify Email button inside the container.
    $form['email_container']['verify_email'] = [
      '#type' => 'button',
      '#value' => t('Verify Email'),
      '#attributes' => ['class' => ['verify-email-button']],
      '#ajax' => [
        'callback' => 'rte_mis_mail_email_verify',
        'wrapper' => 'email-container',
        'effect' => 'fade',
      ],
    ];
    // Container that shall contain the otp related fields and buttons.
    $form['email_container']['otp_container'] = [
      '#type' => 'container',
      '#attributes' => ['id' => 'otp-container'],
      '#states' => [
        'visible' => [
          ':input[name="display_handler"]' => ['value' => TRUE],
        ],
      ],
    ];
    // Otp field.
    $form['email_container']['otp_container']['field_otp'] = [
      '#type' => 'textfield',
      '#maxlength' => 4,
      '#title' => t('Enter OTP'),
      '#attributes' => [
        'autocomplete' => 'off',
      ],
    ];
    // Otp submit button.
    $form['email_container']['otp_container']['otp_submit_button'] = [
      '#type' => 'button',
      '#value' => t('Submit OTP'),
      '#ajax' => [
        'callback' => 'rte_mis_mail_otp_submit',
        'wrapper' => 'account-creation-button email-container',
        'effect' => 'fade',
      ],
    ];
    // Otp resend.
    $form['email_container']['otp_container']['otp_resend_button'] = [
      '#type' => 'button',
      '#value' => t('Resend OTP'),
      '#attributes' => ['class' => ['otp-resend-button']],
      '#ajax' => [
        'callback' => 'rte_mis_mail_otp_resend',
        'wrapper' => 'email-container',
        'effect' => 'fade',
      ],
    ];
    $form['email_container']['otp_container']['timer'] = [
      '#markup' => '<span id="timer"></span>',
    ];
    // Field for displaying error msg.
    $form['email_container']['error_message'] = [
      '#type' => 'container',
      '#attributes' => ['id' => 'email-validation-message'],
    ];
    $form['#attached']['library'] = 'rte_mis_mail/resend_button_timer';
    // Setting the submit button disabled.
    $form['actions']['submit']['#attributes']['disabled'] = TRUE;
    // Setting a wrapper to the submit button.
    $form['actions']['submit']['#attributes']['id'] = 'account-creation-button';
  }
}

/**
 * Ajax call for email verify.
 *
 * Function to check the email entered, if there persist no error then sending
 *  the mail,displaying the otp fields and buttons,setting the mail field to
 *  read only mode, unseting the verify email button.
 */
function rte_mis_mail_email_verify(array &$form, FormStateInterface $form_state) {

  $response = new AjaxResponse();
  if (!empty(trim($form_state->getValue('mail'), ""))) {
    // Call the otp service.
    $otp_service = \Drupal::service('rte_mis_mail.otp_service');
    // Calling the email verify function to check for email related errors.
    $error_msgs = $otp_service->verifyEmail();
    // Checking if there are any errors.
    if ($error_msgs != FALSE) {
      // Get the error message value.
      $form_state->set('no_cache', TRUE);
      $response->addCommand(new HtmlCommand('#email-validation-message', reset($error_msgs)));
      \Drupal::messenger()->deleteAll();
      return $response;
    }
    // Actions when there are no errors.
    else {
      $email = trim($form_state->getValue('mail'), "");
      rte_mis_mail_process_registration_email($email);
      unset($form['email_container']['verify_email']);
      $form_state->setValue('display_handler', TRUE);
      $form['email_container']['otp_container']['otp_resend_button']['#attributes']['disabled'] = 'disabled';
      \Drupal::messenger()->deleteAll();
      return $form['email_container'];
    }
  }
  else {
    $form_state->set('no_cache', TRUE);
    $response->addCommand(new HtmlCommand('#email-validation-message', t('Email can not be empty!')));
    \Drupal::messenger()->deleteAll();
    return $response;
  }

}

/**
 * Resends the one-time password (OTP) via AJAX during registration.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 *
 * @return array
 *   The modified form array with updated email container.
 */
function rte_mis_mail_otp_resend(array &$form, FormStateInterface $form_state) {
  $email = trim($form_state->getValue('mail'), "");
  $response = new AjaxResponse();
  if (\Drupal::flood()->isAllowed('otp_resend', 5, 3600, $email)) {
    if (rte_mis_mail_process_registration_email($email)) {
      $form['email_container']['account']['mail']['#attributes']['readonly'] = 'readonly';
      unset($form['email_container']['verify_email']);
      \Drupal::messenger()->deleteAll();
      \Drupal::flood()->register('otp_resend', 3600, $form_state->getValue('mail'));
    }
    $form['email_container']['otp_container']['otp_resend_button']['#attributes']['disabled'] = 'disabled';
    \Drupal::messenger()->deleteAll();
    return $form['email_container'];
  }
  else {
    // If flood control denies, inform the user.
    $response->addCommand(new HtmlCommand('#email-validation-message', t("You've reached the limit for OTP resend requests. Please try again later.")));
    \Drupal::messenger()->deleteAll();
    return $response;
  }
}

/**
 * Function for sending email to user.
 *
 * Performs the mail sending process, by generating the otp, checking the
 * database and sending the mail to the user.
 *
 * @param string $email
 *   The email address of the user.
 */
function rte_mis_mail_process_registration_email(string $email) {
  // Call the otp service.
  $otp_service = \Drupal::service('rte_mis_mail.otp_service');
  // Generate OTP and get information.
  $otp_info = $otp_service->generateOtp();
  if (!empty($otp_info[0]) && !empty($otp_info[1])) {
    // Table values.
    $otp_table_values = [
      'email' => $email,
      'otp' => $otp_info[0],
      'created' => $otp_info[1],
      'context' => 'User Registration',
    ];
  }
  // Table name where data will be stored.
  if (($otp_service->checkDatabaseRecord($email)) == FALSE) {
    $otp_service->insertData($otp_table_values);
  }
  else {
    $otp_service->updateData($otp_table_values);
  }
  if ($otp_service->generateMail($email, 'rte_mis_mail', 'otp', $otp_table_values['otp'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Form submission handler for OTP validation during user registration.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return array|\Drupal\Core\Ajax\AjaxResponse
 *   The processed form array or an Ajax response.
 */
function rte_mis_mail_otp_submit(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // Call the otp service.
  $otp_service = \Drupal::service('rte_mis_mail.otp_service');
  // Retrieve user-entered OTP and email value from the form state.
  if ($form_state->getValue('field_otp')) {
    $user_entered_otp = $form_state->getValue('field_otp');
    $email = trim($form_state->getValue('mail'), "");
    // Query the database to fetch the stored OTP associated with the email.
    $otp_in_database = $otp_service->fetchOtpFromDb($email);
    // Check if the entered OTP matches the one stored in the database.
    if ($otp_in_database === $user_entered_otp) {
      $otp_service->markEmailAsVerified($email);
      // Enable form submission, mark account creation, and update elements.
      $form['actions']['submit']['#attributes']['disabled'] = FALSE;
      $form_state->set('account_creation', TRUE);
      unset($form['email_container']['otp_container']);
      $form['email_container']['verify_email']['#attributes']['style'] = 'display: none;';
      $form['email_container']['#attributes']['class'] = 'email-verified';

      $form_state->set('no_cache', TRUE);

      // Get the renderer service.
      $renderer = \Drupal::service('renderer');

      // Command to update the submit button wrapper.
      $response->addCommand(new ReplaceCommand(
      '#account-creation-button',
      $renderer->render($form['actions']['submit'])
      ));

      // Command to update the email container wrapper.
      $response->addCommand(new ReplaceCommand(
        '#email-container',
        $renderer->render($form['email_container'])
      ));
      \Drupal::messenger()->deleteAll();
      return $response;
    }
    // If OTP doesn't match, display an error message.
    else {
      $form_state->set('no_cache', TRUE);
      $response->addCommand(new HtmlCommand('#email-validation-message', t('OTP did not match')));
      \Drupal::messenger()->deleteAll();
      return $response;
    }
  }
  else {
    $form_state->set('no_cache', TRUE);
    $response->addCommand(new HtmlCommand('#email-validation-message', t('OTP field cannot be Empty')));
    \Drupal::messenger()->deleteAll();
    return $response;
  }
  $email = trim($form_state->getValue('mail'), "");
  // Query the database to fetch the stored OTP associated with the email.
  $otp_in_database = $otp_service->fetchOtpFromDb($email);
  // Create an Ajax response to update the submit button wrapper.
}

/**
 * Implements hook_cron().
 *
 * For truncating all the rows in the database.
 */
function rte_mis_mail_cron() {
  // Call the otp service.
  $otp_service = \Drupal::service('rte_mis_mail.otp_service');
  $fields = ['created', 'verified', 'email'];
  // Storing the filtered emails.
  $emails_to_preserve = $otp_service->filterRows($fields);
  // Deleting all the mails excepts the stored one.
  $otp_service->cleanUpOtps($emails_to_preserve);
}

/**
 * Generates an OTP,Saves to DB and sends it via mail.
 */
function rte_mis_mail_generate_otp(&$form, &$form_state) {

  $otpService = \Drupal::service('rte_mis_mail.otp_service');
  $to = \Drupal::currentUser()->getEmail();
  [$otp, $time] = $otpService->generateOtp();

  $otp_table_values = [
    'otp' => $otp,
    'created' => $time,
    'email' => $to,
    'context' => 'session-limit',
  ];
  $email_exists = $otpService->checkDatabaseRecord($to);
  if ($email_exists) {
    $otpService->updateData($otp_table_values);
  }
  else {
    $otpService->insertData($otp_table_values);
  }

  $module_name = 'rte_mis_mail';
  $key = 'otp';
  $validate_mail = $otpService->generateMail($to, $module_name, $key, $otp);
  // Check if the mail is sent and set the flag accordingly.
  if ($validate_mail) {
    $form_state->set('otp_generated', TRUE);
    $form_state->set('otp_validated', FALSE);
    $form_state->setRebuild();
  }
  else {
    $form_state->set('otp_generated', FALSE);
  }
}

/**
 * Fetch OTP from DB and validates it.
 */
function rte_mis_mail_validate_otp(&$form, FormStateInterface $form_state) {
  $entered_otp = $form_state->getValue('otp');
  $otpService = \Drupal::service('rte_mis_mail.otp_service');
  $to = \Drupal::currentUser()->getEmail();
  $session_otp = strval($otpService->fetchOtpFromDb($to));
  if ($entered_otp !== $session_otp) {
    $form_state->setErrorByName('otp', t('The OTP you entered is incorrect.'));
  }
  else {
    $form_state->set('otp_validated', TRUE);
    $otpService->markEmailAsVerified($to);
  }
}

/**
 * Implements hook_mail().
 */
function rte_mis_mail_mail($key, &$message, $params) {
  switch ($key) {
    case 'otp':
      $message['subject'] = \Drupal::translation()->translate('@subject', ['@subject' => $params['subject']]);
      $message['body'][] = \Drupal::translation()->translate('@message', ['@message' => $params['message']]);
      break;
  }
}
