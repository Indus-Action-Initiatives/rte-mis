<?php

/**
 * @file
 * Contains rte_mis_school.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\eck\EckEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function rte_mis_school_user_presave(UserInterface $user) {
  // Check the user role and based on that define what should be the user name
  // of the user.
  $roles = $user->getRoles();
  if (!empty($roles)) {
    // Now add the check for different roles.
    if ((count($roles) === 1 & in_array('anonymous', $roles))
      || (in_array('school_admin', $roles))) {
      // If user is having only anonymous user role or if the user is having
      // school admin role, then the user name should be the school UDISE code.
      $target_id = $user->get('field_school_details')->getString();
      if (!empty($target_id)) {
        $school_details = \Drupal::entityTypeManager()->getStorage('mini_node')->load($target_id);
        if ($school_details instanceof EckEntityInterface) {
          $term_target_id = $school_details->get('field_udise_code')->getString();
          // Load the UDISE code term.
          $udise_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_target_id);
          if ($udise_term instanceof TermInterface) {
            $udise_code = $udise_term->getName();
            if (!empty($udise_code)) {
              // Set the UDISE code as username for school user.
              $user->setUsername($udise_code);
            }
          }
        }
      }
    }
    elseif (in_array('block_admin', $roles)) {
      // Generate a username for block admin user based on the block.
      // @todo Add the logic to generate block username.
    }
    elseif (in_array('state_admin', $roles)) {
      // @todo Add the logic to generate state username.
    }
    elseif (in_array('district_admin', $roles)) {
      // @todo Add the logic to generate district username.
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rte_mis_school_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['name']['#title'] = t('Username or UDISE Code');
}

/**
 * Implements hook_form_alter().
 */
function rte_mis_school_form_alter(&$form, FormStateInterface $form_state, string $form_id) {
  if ($form_id === 'user_form') {
    // Show username in readonly format.
    $form['account']['name']['#access'] = TRUE;
    $form['account']['name']['#attributes']['readonly'] = 'readonly';
    $form['account']['name']['#attributes']['disabled'] = 'disabled';
  }
  elseif ($form_id === 'user_register') {
    $form['account']['name']['#access'] = FALSE;
  }
  elseif ($form_id === 'user_register_form') {
    $form['#validate'][] = '_rte_mis_school_udise_validation';
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function rte_mis_school_inline_entity_form_entity_form_alter(&$form, FormStateInterface $form_state) {
  // Validate if the field exists or not in the form before doing any changes.
  if (array_key_exists('field_school_name', $form)) {
    $form['field_school_name']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
  }

  if (array_key_exists('field_udise_code', $form)) {
    $form['#prefix'] = '<div id="form-ajax-wrapper">';
    $form['#suffix'] = '</div>';

    $form['field_udise_code']['widget']['#ajax'] = [
      'callback' => 'rte_mis_school_populate_school_name',
      'wrapper' => 'form-ajax-wrapper',
      'event' => 'select2:select',
      'method' => 'replace',
      'progress' => [
        'type' => 'throbber',
        'message' => t('Searching School Name...'),
      ],
    ];

    // Add the udise code cache tag so that we get the updated list of UDISE
    // code everytime any changes occurs in the vocab.
    $form['#cache']['tags'] = array_merge($form['#cache']['tags'] ?? [], ['taxonomy_term_list:school_udise_code']);
  }
}

/**
 * Callback function to populate the school name based on UDISE code.
 */
function rte_mis_school_populate_school_name(array $form, FormStateInterface $form_state) {
  // @todo Need to add proper validations here.
  // Get the UDISE code term value.
  $target_id = $form_state->getValue('field_school_details')[0]['inline_entity_form']['field_udise_code'];

  if (!empty($target_id) && $target_id[0]['value'] !== '_none') {
    // Load the term and get the School name.
    $term = Term::load($target_id[0]['value']);
    $school_name = $term->get('field_school_name')->getString();
    $form['field_school_details']['widget'][0]['inline_entity_form']['field_school_name']['widget'][0]['value']['#value'] = $school_name;
  }
  else {
    $form['field_school_details']['widget'][0]['inline_entity_form']['field_school_name']['widget'][0]['value']['#value'] = '';
  }

  return $form['field_school_details']['widget'][0]['inline_entity_form'];
}

/**
 * Callback function to provide the list of approved UDISE code.
 */
function rte_mis_school_udise_list(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  // Load all the approved UDISE terms.
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'school_udise_code',
    'field_workflow' => 'school_udise_code_workflow_approved',
  ]);

  $options = [
    '_none' => '- None -',
  ];
  foreach ($terms as $term) {
    if ($term instanceof Term) {
      $options[$term->id()] = $term->label();
    }
  }

  return $options;
}

/**
 * Callback function to provide the list of multiple fields.
 */
function rte_mis_school_default_field_options(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE) {
  $options = [];
  // Get the field name.
  $field_name = $definition->getName();
  if (in_array($field_name, ['field_aid_status', 'field_minority_status'])) {
    // Get the field name with option defined.
    $config = \Drupal::config('rte_mis_school.settings')->get('field_default_options');
    $defined_options = $config[$field_name] ?? NULL;
    if (isset($defined_options)) {
      $options = $defined_options;
    }
  }
  return $options;

}

/**
 * Implements hook_local_tasks_alter().
 */
function rte_mis_school_local_tasks_alter(&$local_tasks) {
  // Alter the destination query parameter for delete local task in taxonomy.
  if ($local_tasks['entity.taxonomy_term.delete_form']) {
    $local_tasks['entity.taxonomy_term.delete_form']['class'] = '\Drupal\rte_mis_school\Plugin\Menu\AlterTaxonomyLocalTask';
  }
}

/**
 * Callback function to check if School exists with the same UDISE code.
 */
function _rte_mis_school_udise_validation(&$form, FormStateInterface $form_state) {
  $school_details = $form_state->getValue('field_school_details');
  if (!empty($school_details)) {
    $target_id = $school_details[0]['inline_entity_form']['field_udise_code'][0]['value'];
    $school_info = \Drupal::entityTypeManager()->getStorage('mini_node')->loadByProperties([
      'field_udise_code' => $target_id,
    ]);
    if (count($school_info) > 0) {
      // Reset the school info array.
      $school_info = array_pop($school_info);
      if ($school_info instanceof EckEntityInterface) {
        // Throw error for the UDISE code.
        $form_state->setErrorByName('field_school_details', t('Account already exists with this UDISE Code.'));
      }
    }
  }
}

/**
 * Implements hook_views_pre_build().
 */
function rte_mis_school_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Pass the argument for contextual filter for user info view.
  if ($view->id() == 'school_basic_information' && $display_id == 'school_info') {
    // Get the udise code information from the current logged in user.
    $user = User::load(\Drupal::currentUser()->id());
    if ($user instanceof UserInterface) {
      $school_target_id = $user->get('field_school_details')->getString();
      if (!empty($school_target_id)) {
        // @todo Move the below code in a helper service because the code is
        // getting used at multiple places.
        $school_details = \Drupal::entityTypeManager()->getStorage('mini_node')->load($school_target_id);
        if ($school_details instanceof EckEntityInterface) {
          $term_target_id = $school_details->get('field_udise_code')->getString();
          // Load the UDISE code term.
          $udise_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_target_id);
          if ($udise_term instanceof TermInterface) {
            $udise_code = $udise_term->getName();
            if (!empty($udise_code)) {
              $args[0] = $udise_code;
            }
          }
        }
      }
    }
  }
}
